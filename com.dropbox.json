{
    "module_type": "org.thingpedia.v2",
    "params": {},
    "category": "online",
    "subcategory": "data-management",
    "types": [],
    "child_types": [],
    "auth": {
        "type": "oauth2"
    },
    "triggers": {},
    "actions": {
        "move": {
            "args": [
                {
                    "name": "old_name",
                    "type": "Entity(tt:path_name)",
                    "question": "What file do you want to move?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "new_name",
                    "type": "Entity(tt:path_name)",
                    "question": "What should be the new name?",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "moves/renames a file",
            "confirmation": "rename $old_name to $new_name in your Dropbox",
            "confirmation_remote": "rename $old_name to $new_name in $__person's Dropbox",
            "canonical": "move on dropbox",
            "formatted": [],
            "poll_interval": 0
        },
        "create_new_folder": {
            "args": [
                {
                    "name": "folder_name",
                    "type": "Entity(tt:path_name)",
                    "question": "How do you want to call the folder?",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "creates new folder in user's root directory",
            "confirmation": "create a new folder called $folder_name in your Dropbox",
            "confirmation_remote": "create a new folder called $folder_name in $__person's Dropbox",
            "canonical": "create folder on dropbox",
            "formatted": [],
            "poll_interval": 0
        }
    },
    "queries": {
        "get_space_usage": {
            "args": [
                {
                    "name": "used_space",
                    "type": "Measure(byte)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "total_space",
                    "type": "Measure(byte)",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "retrieves the used and allocated space",
            "confirmation": "retrieve your Dropbox quota info",
            "confirmation_remote": "retrieve $__person's Dropbox quota info",
            "canonical": "get space usage on dropbox",
            "formatted": [
                {
                    "type": "text",
                    "text": "You have used ${used_space:MB} MBs out of ${total_space:MB}."
                }
            ],
            "poll_interval": 3600000
        },
        "list_folder": {
            "args": [
                {
                    "name": "folder_name",
                    "type": "Entity(tt:path_name)",
                    "question": "What folder do you want to list?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "file_name",
                    "type": "Entity(tt:path_name)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "is_folder",
                    "type": "Boolean",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "modified_time",
                    "type": "Date",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "file_size",
                    "type": "Measure(byte)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "full_path",
                    "type": "Entity(tt:path_name)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "order_by",
                    "type": "Enum(modified_time_decreasing,modified_time_increasing,name_decreasing,name_increasing)",
                    "question": "",
                    "is_input": true,
                    "required": false
                }
            ],
            "doc": "list the content of a folder",
            "confirmation": "list the content of $folder_name in your Dropbox",
            "confirmation_remote": "list the content of $folder_name in $__person's Dropbox",
            "canonical": "list folder on dropbox",
            "formatted": [
                {
                    "type": "code",
                    "code": "(function(params, hint, formatter) {\nif (params.is_folder)\nreturn `${params.file_name} (dir)`;\nelse\nreturn `${params.file_name} (reg, ${formatter.measureToString(params.file_size, 1, 'KB')} KBs)`;\n})"
                }
            ],
            "poll_interval": 3600000
        },
        "open": {
            "args": [
                {
                    "name": "file_name",
                    "type": "Entity(tt:path_name)",
                    "question": "What file do you want to open? Use the full path name.",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "url",
                    "type": "URL",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "open (retrieve a temporary link to) a file",
            "confirmation": "open $file_name in your Dropbox",
            "confirmation_remote": "open $file_name in $__person's Dropbox",
            "canonical": "open on dropbox",
            "formatted": [
                {
                    "type": "rdl",
                    "webCallback": "${url}",
                    "displayTitle": "${file_name}"
                }
            ],
            "poll_interval": -1
        }
    },
    "examples": [
        {
            "utterance": "my dropbox quota",
            "program": "let table x := @com.dropbox.get_space_usage();"
        },
        {
            "utterance": "the space I have on dropbox",
            "program": "let table x := @com.dropbox.get_space_usage();"
        },
        {
            "utterance": "my dropbox files in folder ${p_folder_name:const}",
            "program": "let table x := \\(p_folder_name :Entity(tt:path_name)) -> @com.dropbox.list_folder(folder_name=p_folder_name);"
        },
        {
            "utterance": "my files under ${p_folder_name:const} on dropbox",
            "program": "let table x := \\(p_folder_name :Entity(tt:path_name)) -> @com.dropbox.list_folder(folder_name=p_folder_name);"
        },
        {
            "utterance": "my file named ${p_file_name} on dropbox",
            "program": "let table x := \\(p_file_name :Entity(tt:path_name)) -> @com.dropbox.open(file_name=p_file_name);"
        },
        {
            "utterance": "the temporary link to ${p_file_name:const} on dropbox",
            "program": "let table x := \\(p_file_name :Entity(tt:path_name)) -> @com.dropbox.open(file_name=p_file_name);"
        },
        {
            "utterance": "move file ${p_old_name:const} to ${p_new_name} in Dropbox",
            "program": "let action x := \\(p_old_name :Entity(tt:path_name), p_new_name :Entity(tt:path_name)) -> @com.dropbox.move(old_name=p_old_name, new_name=p_new_name);"
        },
        {
            "utterance": "rename ${p_old_name:const} to ${p_new_name} in Dropbox",
            "program": "let action x := \\(p_old_name :Entity(tt:path_name), p_new_name :Entity(tt:path_name)) -> @com.dropbox.move(old_name=p_old_name, new_name=p_new_name);"
        },
        {
            "utterance": "rename file ${p_old_name:const} in Dropbox",
            "program": "let action x := \\(p_old_name :Entity(tt:path_name)) -> @com.dropbox.move(old_name=p_old_name);"
        },
        {
            "utterance": "create a new folder with name ${p_folder_name} in my Dropbox",
            "program": "let action x := \\(p_folder_name :Entity(tt:path_name)) -> @com.dropbox.create_new_folder(folder_name=p_folder_name);"
        },
        {
            "utterance": "create a folder ${p_folder_name:const} in my Dropbox",
            "program": "let action x := \\(p_folder_name :Entity(tt:path_name)) -> @com.dropbox.create_new_folder(folder_name=p_folder_name);"
        },
        {
            "utterance": "when a file changed under folder ${p_folder_name:const} in my dropbox ",
            "program": "let stream x := \\(p_folder_name :Entity(tt:path_name)) -> monitor (@com.dropbox.list_folder(folder_name=p_folder_name));"
        },
        {
            "utterance": "my dropbox files modified this week under folder ${p_folder_name:const}",
            "program": "let table x := \\(p_folder_name :Entity(tt:path_name)) -> (@com.dropbox.list_folder(folder_name=p_folder_name)), modified_time >= start_of(week);"
        },
        {
            "utterance": "my dropbox files smaller than ${p_file_size} under folder ${p_folder_name:const}",
            "program": "let table x := \\(p_folder_name :Entity(tt:path_name), p_file_size :Measure(byte)) -> (@com.dropbox.list_folder(folder_name=p_folder_name)), file_size <= p_file_size;"
        },
        {
            "utterance": "my dropbox files larger than ${p_file_size} under folder ${p_folder_name:const}",
            "program": "let table x := \\(p_folder_name :Entity(tt:path_name), p_file_size :Measure(byte)) -> (@com.dropbox.list_folder(folder_name=p_folder_name)), file_size >= p_file_size;"
        },
        {
            "utterance": "when I used more than $p_used_space on dropbox",
            "program": "let stream x := \\(p_used_space :Measure(byte)) -> monitor ((@com.dropbox.get_space_usage()), used_space >= p_used_space);"
        },
        {
            "utterance": "my dropbox files that changed most recently",
            "program": "let table x := @com.dropbox.list_folder(order_by=enum(modified_time_decreasing));"
        },
        {
            "utterance": "my dropbox files under folder $p_folder_name that changed most recently",
            "program": "let table x := \\(p_folder_name :Entity(tt:path_name)) -> @com.dropbox.list_folder(folder_name=p_folder_name, order_by=enum(modified_time_decreasing));"
        },
        {
            "utterance": "my dropbox files in alphabetical order",
            "program": "let table x := @com.dropbox.list_folder(order_by=enum(name_increasing));"
        },
        {
            "utterance": "my dropbox files under folder $p_folder_name in alphabetical order",
            "program": "let table x := \\(p_folder_name :Entity(tt:path_name)) -> @com.dropbox.list_folder(folder_name=p_folder_name, order_by=enum(name_increasing));"
        },
        {
            "utterance": "my dropbox files in reverse alphabetical order",
            "program": "let table x := @com.dropbox.list_folder(order_by=enum(name_decreasing));"
        },
        {
            "utterance": "my dropbox files under folder $p_folder_name in reverse alphabetical order",
            "program": "let table x := \\(p_folder_name :Entity(tt:path_name)) -> @com.dropbox.list_folder(folder_name=p_folder_name, order_by=enum(name_decreasing));"
        },
        {
            "utterance": "when a file or folder changes under folder ${p_folder_name:const} in my dropbox",
            "program": "let stream x := \\(p_folder_name :Entity(tt:path_name)) -> monitor (@com.dropbox.list_folder(folder_name=p_folder_name));"
        },
        {
            "utterance": ", open ${p_file_name} from dropbox",
            "program": "let table x := \\(p_file_name :Entity(tt:path_name)) -> @com.dropbox.open(file_name=p_file_name);"
        },
        {
            "utterance": ", download ${p_file_name} from dropbox",
            "program": "let table x := \\(p_file_name :Entity(tt:path_name)) -> @com.dropbox.open(file_name=p_file_name);"
        },
        {
            "utterance": "create a new folder in dropbox and name it $p_folder_name",
            "program": "let action x := \\(p_folder_name :Entity(tt:path_name)) -> @com.dropbox.create_new_folder(folder_name=p_folder_name);"
        },
        {
            "utterance": "create a new empty folder in dropbox",
            "program": "let action x := @com.dropbox.create_new_folder();"
        },
        {
            "utterance": "create an empty folder in dropbox and name it $p_folder_name",
            "program": "let action x := \\(p_folder_name :Entity(tt:path_name)) -> @com.dropbox.create_new_folder(folder_name=p_folder_name);"
        }
    ]
}
