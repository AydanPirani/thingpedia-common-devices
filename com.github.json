{
    "module_type": "org.thingpedia.v2",
    "params": {},
    "category": "online",
    "subcategory": "data-management",
    "types": [],
    "child_types": [],
    "auth": {
        "type": "oauth2"
    },
    "queries": {
        "get_issue": {
            "args": [
                {
                    "name": "repo_name",
                    "type": "Entity(tt:path_name)",
                    "question": "What repository do you want to watch?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "user",
                    "type": "Entity(tt:username)",
                    "question": "What user are you interested in?",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "number",
                    "type": "Number",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "title",
                    "type": "String",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "body",
                    "type": "String",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "time",
                    "type": "Date",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "issues on a particular repository",
            "confirmation": "opened issues of repository $repo_name on Github",
            "confirmation_remote": "opened issues of repository $repo_name on $__person's Github",
            "canonical": "issues on github",
            "formatted": [
                {
                    "type": "text",
                    "text": "Issue @${number} opened in ${repo_name} by @${user}"
                },
                {
                    "type": "text",
                    "text": "${title}"
                },
                {
                    "type": "text",
                    "text": "${body}"
                }
            ],
            "poll_interval": 60000,
            "is_list": true
        },
        "get_commit": {
            "args": [
                {
                    "name": "repo_name",
                    "type": "Entity(tt:path_name)",
                    "question": "What repository do you want to watch?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "user",
                    "type": "Entity(tt:username)",
                    "question": "What user are you interested in?",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "message",
                    "type": "String",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "time",
                    "type": "Date",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "modified_files",
                    "type": "Array(Entity(tt:path_name))",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "added_files",
                    "type": "Array(Entity(tt:path_name))",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "deleted_files",
                    "type": "Array(Entity(tt:path_name))",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "commits to a particular repository",
            "confirmation": "commits of repository $repo_name on Github",
            "confirmation_remote": "commits of repository $repo_name on $__person's Github",
            "canonical": "commits on github",
            "formatted": [
                {
                    "type": "text",
                    "text": "\"${message}\" by @${user}"
                }
            ],
            "poll_interval": 60000,
            "is_list": true
        },
        "get_milestone": {
            "args": [
                {
                    "name": "repo_name",
                    "type": "Entity(tt:path_name)",
                    "question": "What repository do you want to watch?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "user",
                    "type": "Entity(tt:username)",
                    "question": "What user are you interested in?",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "description",
                    "type": "String",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "time",
                    "type": "Date",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "title",
                    "type": "String",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "milestones from a particular repository",
            "confirmation": "the milestones created on Github repository $repo_name",
            "confirmation_remote": "the milestones created on $__person's Github repository",
            "canonical": "milestones on github",
            "formatted": [
                {
                    "type": "text",
                    "text": "Milestone created in ${repo_name} by ${user}: "
                },
                {
                    "type": "text",
                    "text": "$title"
                },
                {
                    "type": "text",
                    "text": "${description}"
                }
            ],
            "poll_interval": 3600000,
            "is_list": true
        },
        "get_issue_comment": {
            "args": [
                {
                    "name": "repo_name",
                    "type": "Entity(tt:path_name)",
                    "question": "What repository do you want to watch?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "user",
                    "type": "Entity(tt:username)",
                    "question": "What user are you interested in?",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "issue_number",
                    "type": "Number",
                    "question": "What issue number to want to watch?",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "body",
                    "type": "String",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "time",
                    "type": "Date",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "comments on issues",
            "confirmation": "comments on issues on Github repository $repo_name",
            "confirmation_remote": "comments on issues on $__person's Github repository $repo_name ",
            "canonical": "get issue comments on github",
            "formatted": [
                {
                    "type": "text",
                    "text": "@${user} commented on issue ${issue_number} in ${repo_name}"
                },
                {
                    "type": "text",
                    "text": "${body}"
                }
            ],
            "poll_interval": 3600000,
            "is_list": true
        },
        "get_file": {
            "args": [
                {
                    "name": "repo_name",
                    "type": "Entity(tt:path_name)",
                    "question": "What repository is the file in?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "file_name",
                    "type": "Entity(tt:path_name)",
                    "question": "What file do you want to get?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "url",
                    "type": "Entity(tt:url)",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "generate a temporary link for the given file",
            "confirmation": "link of ${file_name} in Github repository ${repo_name}",
            "confirmation_remote": "link of ${file_name} in $__person's Github repository ${repo_name}",
            "canonical": "link of file in github",
            "formatted": [
                {
                    "type": "text",
                    "text": "Here is the link:"
                },
                {
                    "type": "rdl",
                    "webCallback": "${url}",
                    "displayTitle": "${url}"
                }
            ],
            "poll_interval": -1,
            "is_list": false
        }
    },
    "actions": {
        "add_email": {
            "args": [
                {
                    "name": "email",
                    "type": "Entity(tt:email_address)",
                    "question": "What email do youli want to add?",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "Add a new email to account",
            "confirmation": "add $email to your Github account",
            "confirmation_remote": "add $email to $__person's Github account",
            "canonical": "add email on github",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        },
        "comment_issue": {
            "args": [
                {
                    "name": "repo_name",
                    "type": "Entity(tt:path_name)",
                    "question": "What repository do you want to comment on?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "issue_number",
                    "type": "Number",
                    "question": "What issue do you want to comment on?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "body",
                    "type": "String",
                    "question": "What do you want to comment?",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "post a new comment on a given issue",
            "confirmation": "comment on issue $issue_number in $repo_name on Github",
            "confirmation_remote": "comment on issue $issue_number in $repo_name on $__person's Github",
            "canonical": "comment on issue on github",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        }
    },
    "examples": [
        {
            "utterance": "when a new issue opened in Github repository $p_repo_name ",
            "program": "let stream x := \\(p_repo_name :Entity(tt:path_name)) -> monitor (@com.github.get_issue(repo_name=p_repo_name));"
        },
        {
            "utterance": "when there are new issues on Github for $p_repo_name",
            "program": "let stream x := \\(p_repo_name :Entity(tt:path_name)) -> monitor (@com.github.get_issue(repo_name=p_repo_name));"
        },
        {
            "utterance": "when $p_user opens an issue on Github",
            "program": "let stream x := \\(p_user :Entity(tt:username)) -> monitor ((@com.github.get_issue()), user == p_user);"
        },
        {
            "utterance": "if someone opens an issue on Github for $p_repo_name",
            "program": "let stream x := \\(p_repo_name :Entity(tt:path_name)) -> monitor (@com.github.get_issue(repo_name=p_repo_name));"
        },
        {
            "utterance": "if $p_user opens an issue on Github",
            "program": "let stream x := \\(p_user :Entity(tt:username)) -> monitor ((@com.github.get_issue()), user == p_user);"
        },
        {
            "utterance": "when user $p_user opens an issue in Github repository $p_repo_name",
            "program": "let stream x := \\(p_user :Entity(tt:username), p_repo_name :Entity(tt:path_name)) -> monitor ((@com.github.get_issue(repo_name=p_repo_name)), user == p_user);"
        },
        {
            "utterance": "when there is a new commit for github repository $p_repo_name",
            "program": "let stream x := \\(p_repo_name :Entity(tt:path_name)) -> monitor (@com.github.get_commit(repo_name=p_repo_name));"
        },
        {
            "utterance": "if someone commits in $p_repo_name",
            "program": "let stream x := \\(p_repo_name :Entity(tt:path_name)) -> monitor (@com.github.get_commit(repo_name=p_repo_name));"
        },
        {
            "utterance": "when user $p_user commits in github repository $p_repo_name",
            "program": "let stream x := \\(p_user :Entity(tt:username), p_repo_name :Entity(tt:path_name)) -> monitor ((@com.github.get_commit(repo_name=p_repo_name)), user == p_user);"
        },
        {
            "utterance": "if $p_user commits in $p_repo_name",
            "program": "let stream x := \\(p_user :Entity(tt:username), p_repo_name :Entity(tt:path_name)) -> monitor ((@com.github.get_commit(repo_name=p_repo_name)), user == p_user);"
        },
        {
            "utterance": "when a new milestone is created in github repository $p_repo_name",
            "program": "let stream x := \\(p_repo_name :Entity(tt:path_name)) -> monitor (@com.github.get_milestone(repo_name=p_repo_name));"
        },
        {
            "utterance": "when user $p_user create a new milestone in github repository $p_repo_name",
            "program": "let stream x := \\(p_user :Entity(tt:username), p_repo_name :Entity(tt:path_name)) -> monitor ((@com.github.get_milestone(repo_name=p_repo_name)), user == p_user);"
        },
        {
            "utterance": "when there is a new comment in github repository $p_repo_name",
            "program": "let stream x := \\(p_repo_name :Entity(tt:path_name)) -> monitor (@com.github.get_issue_comment(repo_name=p_repo_name));"
        },
        {
            "utterance": "when user $p_user comments on some issue in repository $p_repo_name",
            "program": "let stream x := \\(p_user :Entity(tt:username), p_repo_name :Entity(tt:path_name)) -> monitor ((@com.github.get_issue_comment(repo_name=p_repo_name)), user == p_user);"
        },
        {
            "utterance": "when there is a new comment on issue $p_issue_number in repository $p_repo_name",
            "program": "let stream x := \\(p_issue_number :Number, p_repo_name :Entity(tt:path_name)) -> monitor ((@com.github.get_issue_comment(repo_name=p_repo_name)), issue_number == p_issue_number);"
        },
        {
            "utterance": "if $p_user comments on some issue in $p_repo_name on github",
            "program": "let stream x := \\(p_user :Entity(tt:username), p_repo_name :Entity(tt:path_name)) -> monitor ((@com.github.get_issue_comment(repo_name=p_repo_name)), user == p_user);"
        },
        {
            "utterance": "if someone comments on issue $p_issue_number in $p_repo_name on github",
            "program": "let stream x := \\(p_issue_number :Number, p_repo_name :Entity(tt:path_name)) -> monitor ((@com.github.get_issue_comment(repo_name=p_repo_name)), issue_number == p_issue_number);"
        },
        {
            "utterance": "add email $p_email to my github account",
            "program": "let action x := \\(p_email :Entity(tt:email_address)) -> @com.github.add_email(email=p_email);"
        },
        {
            "utterance": "comment on issue $p_issue_number in github repository $p_repo_name",
            "program": "let action x := \\(p_issue_number :Number, p_repo_name :Entity(tt:path_name)) -> @com.github.comment_issue(issue_number=p_issue_number, repo_name=p_repo_name);"
        },
        {
            "utterance": "issues opened in github repository $p_repo_name",
            "program": "let table x := \\(p_repo_name :Entity(tt:path_name)) -> @com.github.get_issue(repo_name=p_repo_name);"
        },
        {
            "utterance": "milestones of github repository $p_repo_name",
            "program": "let table x := \\(p_repo_name :Entity(tt:path_name)) -> @com.github.get_milestone(repo_name=p_repo_name);"
        },
        {
            "utterance": "commits on Github repository $p_repo_name",
            "program": "let table x := \\(p_repo_name :Entity(tt:path_name)) -> @com.github.get_commit(repo_name=p_repo_name);"
        },
        {
            "utterance": "issue comments of Github repository $p_repo_name",
            "program": "let table x := \\(p_repo_name :Entity(tt:path_name)) -> @com.github.get_issue_comment(repo_name=p_repo_name);"
        },
        {
            "utterance": "leave a comment in issue $p_issue_number in repository $p_repo_name on github ",
            "program": "let action x := \\(p_issue_number :Number, p_repo_name :Entity(tt:path_name)) -> @com.github.comment_issue(issue_number=p_issue_number, repo_name=p_repo_name);"
        },
        {
            "utterance": "comment on $p_issue_number on github repository $p_repo_name saying ${p_body:const}",
            "program": "let action x := \\(p_issue_number :Number, p_repo_name :Entity(tt:path_name), p_body :String) -> @com.github.comment_issue(issue_number=p_issue_number, repo_name=p_repo_name, body=p_body);"
        },
        {
            "utterance": "comment ${p_body:const} on $p_issue_number on github repository $p_repo_name",
            "program": "let action x := \\(p_issue_number :Number, p_repo_name :Entity(tt:path_name), p_body :String) -> @com.github.comment_issue(issue_number=p_issue_number, repo_name=p_repo_name, body=p_body);"
        },
        {
            "utterance": "when someone commits to github",
            "program": "let stream x := monitor (@com.github.get_commit());"
        },
        {
            "utterance": "when someone comments on a github issue",
            "program": "let stream x := monitor (@com.github.get_issue_comment());"
        },
        {
            "utterance": "if $p_user pushes to $p_repo_name on github",
            "program": "let stream x := \\(p_user :Entity(tt:username), p_repo_name :Entity(tt:path_name)) -> monitor ((@com.github.get_commit(repo_name=p_repo_name)), user == p_user);"
        },
        {
            "utterance": "link of file $p_file_name in repo $p_repo_name on github",
            "program": "let table x := \\(p_repo_name :Entity(tt:path_name), p_file_name :Entity(tt:path_name)) -> @com.github.get_file(repo_name=p_repo_name, file_name=p_file_name);"
        },
        {
            "utterance": "file $p_file_name in github repository $p_repo_name",
            "program": "let table x := \\(p_repo_name :Entity(tt:path_name), p_file_name :Entity(tt:path_name)) -> @com.github.get_file(repo_name=p_repo_name, file_name=p_file_name);"
        },
        {
            "utterance": "file on github",
            "program": "let table x := @com.github.get_file();"
        },
        {
            "utterance": "file on github repository $p_repo_name",
            "program": "let table x := \\(p_repo_name :Entity(tt:path_name)) -> @com.github.get_file(repo_name=p_repo_name);"
        },
        {
            "utterance": "link of file on github repository $p_repo_name",
            "program": "let table x := \\(p_repo_name :Entity(tt:path_name)) -> @com.github.get_file(repo_name=p_repo_name);"
        },
        {
            "utterance": "when a new commit in github repositoy $p_repo_name changes file $p_file_name",
            "program": "let stream x := \\(p_repo_name :Entity(tt:path_name), p_file_name :Entity(tt:path_name)) -> monitor ((@com.github.get_commit(repo_name=p_repo_name)), contains(modified_files, p_file_name));"
        },
        {
            "utterance": "when $p_user changes file $p_file_name in github repository $p_repo_name",
            "program": "let stream x := \\(p_repo_name :Entity(tt:path_name), p_file_name :Entity(tt:path_name), p_user :Entity(tt:username)) -> monitor ((@com.github.get_commit(repo_name=p_repo_name)), (contains(modified_files, p_file_name) && user == p_user));"
        },
        {
            "utterance": "when $p_file_name is modified in github repositoy $p_repo_name changes file ",
            "program": "let stream x := \\(p_repo_name :Entity(tt:path_name), p_file_name :Entity(tt:path_name)) -> monitor ((@com.github.get_commit(repo_name=p_repo_name)), contains(modified_files, p_file_name));"
        },
        {
            "utterance": "when $p_file_name is changed in github repositoy $p_repo_name changes file ",
            "program": "let stream x := \\(p_repo_name :Entity(tt:path_name), p_file_name :Entity(tt:path_name)) -> monitor ((@com.github.get_commit(repo_name=p_repo_name)), contains(modified_files, p_file_name));"
        }
    ]
}
