{
    "module_type": "org.thingpedia.v2",
    "params": {},
    "category": "online",
    "subcategory": "communication",
    "types": [],
    "child_types": [],
    "auth": {
        "type": "oauth2"
    },
    "queries": {
        "inbox": {
            "args": [
                {
                    "name": "sender_name",
                    "type": "String",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "sender_address",
                    "type": "Entity(tt:email_address)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "subject",
                    "type": "String",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "date",
                    "type": "Date",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "labels",
                    "type": "Array(String)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "snippet",
                    "type": "String",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "thread_id",
                    "type": "Entity(com.gmail:thread_id)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "email_id",
                    "type": "Entity(com.gmail:email_id)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "is_important",
                    "type": "Boolean",
                    "question": "",
                    "is_input": true,
                    "required": false
                },
                {
                    "name": "is_primary",
                    "type": "Boolean",
                    "question": "",
                    "is_input": true,
                    "required": false
                }
            ],
            "doc": "retrieve your inbox",
            "confirmation": "the emails in your GMail inbox",
            "confirmation_remote": "the emails in $__person's GMail inbox",
            "canonical": "list email in inbox",
            "formatted": [
                {
                    "type": "text",
                    "text": "From ${sender_name} <${sender_address}>: ${subject}"
                },
                {
                    "type": "text",
                    "text": "${snippet}"
                }
            ],
            "poll_interval": 3600000,
            "is_list": true
        }
    },
    "actions": {
        "send_email": {
            "args": [
                {
                    "name": "to",
                    "type": "Entity(tt:email_address)",
                    "question": "Who do you want to send to?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "subject",
                    "type": "String",
                    "question": "With what subject?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "message",
                    "type": "String",
                    "question": "What message do you want to send?",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "send an email",
            "confirmation": "send an email to $to with subject $subject on GMail",
            "confirmation_remote": "send an email to $to with subject $subject using $__person's GMail",
            "canonical": "send email on gmail",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        },
        "send_picture": {
            "args": [
                {
                    "name": "to",
                    "type": "Entity(tt:email_address)",
                    "question": "Who do you want to send to?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "subject",
                    "type": "String",
                    "question": "With what subject?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "message",
                    "type": "String",
                    "question": "What message do you want to send?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "picture_url",
                    "type": "Entity(tt:picture)",
                    "question": "Upload the picture now.",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "send an email with a picture attached",
            "confirmation": "send a picture to $to with subject $subject on GMail",
            "confirmation_remote": "send a picture to $to with subject $subject using $__person's GMail",
            "canonical": "send picture on gmail",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        },
        "reply": {
            "args": [
                {
                    "name": "email_id",
                    "type": "Entity(com.gmail:email_id)",
                    "question": "What email do you want to reply to?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "subject",
                    "type": "String",
                    "question": "",
                    "is_input": true,
                    "required": false
                },
                {
                    "name": "message",
                    "type": "String",
                    "question": "What do you want to say in your reply?",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "reply to emails",
            "confirmation": "reply to $email_id saying $message",
            "confirmation_remote": "reply to $email_id saying $message from $__person's GMail",
            "canonical": "gmail reply email",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        },
        "forward": {
            "args": [
                {
                    "name": "email_id",
                    "type": "Entity(com.gmail:email_id)",
                    "question": "What email do you want to forward?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "to",
                    "type": "Entity(tt:email_address)",
                    "question": "Who do you want to forward it to?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "message",
                    "type": "String",
                    "question": "What do you want to say in the email?",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "forward an email",
            "confirmation": "forward $email_id to $to saying $message with your GMail",
            "confirmation_remote": "forward $email_id to $to saying $message with $__person's GMail",
            "canonical": "gmail forward email",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        }
    },
    "examples": [
        {
            "utterance": "when i receive an email on Gmail",
            "program": "let stream x := monitor (@com.gmail.inbox()) on new [email_id];"
        },
        {
            "utterance": "when i receive an email from $p_sender_address on Gmail",
            "program": "let stream x := \\(p_sender_address :Entity(tt:email_address)) -> monitor ((@com.gmail.inbox()), sender_address == p_sender_address) on new [email_id];"
        },
        {
            "utterance": "when i receive an email marked as important",
            "program": "let stream x := monitor (@com.gmail.inbox(is_important=true)) on new [email_id];"
        },
        {
            "utterance": "when i receive an important email from $p_sender_address",
            "program": "let stream x := \\(p_sender_address :Entity(tt:email_address)) -> monitor ((@com.gmail.inbox(is_important=true)), sender_address == p_sender_address) on new [email_id];"
        },
        {
            "utterance": "my primary category emails",
            "program": "let table x := @com.gmail.inbox(is_primary=true);"
        },
        {
            "utterance": "if i receive an email from $p_sender_address in category primary",
            "program": "let stream x := \\(p_sender_address :Entity(tt:email_address)) -> monitor ((@com.gmail.inbox(is_primary=true)), sender_address == p_sender_address);"
        },
        {
            "utterance": "my latest email",
            "program": "let table x := @com.gmail.inbox();"
        },
        {
            "utterance": "my emails from $p_sender_address",
            "program": "let table x := \\(p_sender_address :Entity(tt:email_address)) -> (@com.gmail.inbox()), sender_address == p_sender_address;"
        },
        {
            "utterance": "my emails with label $p_label",
            "program": "let table x := \\(p_label :String) -> (@com.gmail.inbox()), contains(labels, p_label);"
        },
        {
            "utterance": "my emails with subject $p_subject",
            "program": "let table x := \\(p_subject :String) -> (@com.gmail.inbox()), subject =~ p_subject;"
        },
        {
            "utterance": "send an email to $p_to with subject $p_subject with message $p_message using my gmail",
            "program": "let action x := \\(p_to :Entity(tt:email_address), p_subject :String, p_message :String) -> @com.gmail.send_email(to=p_to, subject=p_subject, message=p_message);"
        },
        {
            "utterance": "send an email to $p_to with subject $p_subject with message $p_message",
            "program": "let action x := \\(p_to :Entity(tt:email_address), p_subject :String, p_message :String) -> @com.gmail.send_email(to=p_to, subject=p_subject, message=p_message);"
        },
        {
            "utterance": "send a picture to $p_to with subject $p_subject using my gmail",
            "program": "let action x := \\(p_to :Entity(tt:email_address), p_subject :String) -> @com.gmail.send_picture(to=p_to, subject=p_subject);"
        },
        {
            "utterance": "send a picture to $p_to with subject $p_subject",
            "program": "let action x := \\(p_to :Entity(tt:email_address), p_subject :String) -> @com.gmail.send_picture(to=p_to, subject=p_subject);"
        },
        {
            "utterance": "send an email to $p_to using my gmail",
            "program": "let action x := \\(p_to :Entity(tt:email_address)) -> @com.gmail.send_email(to=p_to);"
        },
        {
            "utterance": "send an email to somebody",
            "program": "let action x := @com.gmail.send_email();"
        },
        {
            "utterance": "email $p_to",
            "program": "let action x := \\(p_to :Entity(tt:email_address)) -> @com.gmail.send_email(to=p_to);"
        },
        {
            "utterance": "email a picture to $p_to",
            "program": "let action x := \\(p_to :Entity(tt:email_address)) -> @com.gmail.send_picture(to=p_to);"
        },
        {
            "utterance": "emails arrived today",
            "program": "let table x := (@com.gmail.inbox()), date >= start_of(day);"
        },
        {
            "utterance": "emails arrived yesterday",
            "program": "let table x := (@com.gmail.inbox()), date >= start_of(day) - 1day;"
        },
        {
            "utterance": "emails arrived in the last hour",
            "program": "let table x := (@com.gmail.inbox()), date >= start_of(day);"
        },
        {
            "utterance": "important emails",
            "program": "let table x := @com.gmail.inbox(is_important=true);"
        },
        {
            "utterance": "reply to ${p_email_id} saying ${p_message}",
            "program": "let action x := \\(p_email_id :Entity(com.gmail:email_id), p_message :String) -> @com.gmail.reply(email_id=p_email_id, message=p_message);"
        },
        {
            "utterance": "reply to ${p_email_id} saying ${p_message} ,  add ${p_subject} to the subject",
            "program": "let action x := \\(p_email_id :Entity(com.gmail:email_id), p_message :String, p_subject :String) -> @com.gmail.reply(email_id=p_email_id, message=p_message, subject=p_subject);"
        },
        {
            "utterance": "reply to ${p_email_id}",
            "program": "let action x := \\(p_email_id :Entity(com.gmail:email_id)) -> @com.gmail.reply(email_id=p_email_id);"
        },
        {
            "utterance": "reply to ${p_to}",
            "program": "let action x := \\(p_to :Entity(tt:email_address)) -> @com.gmail.send_email(to=p_to);"
        },
        {
            "utterance": "reply to ${p_to} saying ${p_message}",
            "program": "let action x := \\(p_to :Entity(tt:email_address), p_message :String) -> @com.gmail.send_email(to=p_to, message=p_message);"
        },
        {
            "utterance": "forward ${p_email_id} to ${p_to} saying ${p_message}",
            "program": "let action x := \\(p_email_id :Entity(com.gmail:email_id), p_to :Entity(tt:email_address), p_message :String) -> @com.gmail.forward(email_id=p_email_id, to=p_to, message=p_message);"
        },
        {
            "utterance": "forward ${p_email_id} to ${p_to}",
            "program": "let action x := \\(p_email_id :Entity(com.gmail:email_id), p_to :Entity(tt:email_address)) -> @com.gmail.forward(email_id=p_email_id, to=p_to);"
        },
        {
            "utterance": "my unimportant emails",
            "program": "let table x := @com.gmail.inbox(is_important=false);"
        },
        {
            "utterance": "send $p_picture_url to $p_to with subject $p_subject",
            "program": "let action x := \\(p_to :Entity(tt:email_address), p_subject :String, p_picture_url :Entity(tt:picture)) -> @com.gmail.send_picture(to=p_to, subject=p_subject, picture_url=p_picture_url);"
        },
        {
            "utterance": "send $p_picture_url to $p_to",
            "program": "let action x := \\(p_to :Entity(tt:email_address), p_picture_url :Entity(tt:picture)) -> @com.gmail.send_picture(to=p_to, picture_url=p_picture_url);"
        },
        {
            "utterance": "send $p_message to $p_to",
            "program": "let action x := \\(p_to :Entity(tt:email_address), p_message :String) -> @com.gmail.send_email(to=p_to, message=p_message);"
        },
        {
            "utterance": "send a picture via email",
            "program": "let action x := @com.gmail.send_picture();"
        },
        {
            "utterance": "send $p_message via email",
            "program": "let action x := \\(p_message :String) -> @com.gmail.send_email(message=p_message);"
        },
        {
            "utterance": "send $p_message via gmail",
            "program": "let action x := \\(p_message :String) -> @com.gmail.send_email(message=p_message);"
        },
        {
            "utterance": "send $p_picture_url via email",
            "program": "let action x := \\(p_picture_url :Entity(tt:picture)) -> @com.gmail.send_picture(picture_url=p_picture_url);"
        },
        {
            "utterance": "send $p_picture_url via gmail",
            "program": "let action x := \\(p_picture_url :Entity(tt:picture)) -> @com.gmail.send_picture(picture_url=p_picture_url);"
        }
    ]
}
