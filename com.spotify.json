{
  "module_type": "org.thingpedia.v2",
  "params": {},
  "category": "online",
  "subcategory": "media",
  "types": [],
  "child_types": [],
  "auth": {
    "type": "oauth2"
  },
  "queries": {
    "get_user_top_tracks": {
      "args": [
        {
          "name": "song",
          "type": "String",
          "question": "",
          "is_input": false,
          "required": false
        }
      ],
      "doc": "get user's top tracks in the last 4 weeks",
      "confirmation": "my top tracks in Spotify",
      "confirmation_remote": "$_person's top tracks in Spotify",
      "canonical": "sportify top tracks",
      "formatted": [
        {
          "type": "text",
          "text": "${song}"
        }
      ],
      "poll_interval": 3600000,
      "is_list": true
    },
    "get_currently_playing": {
      "args": [
        {
          "name": "song",
          "type": "String",
          "question": "",
          "is_input": false,
          "required": false
        }
      ],
      "doc": "retrieve the currently playing track name",
      "confirmation": "the currently playing track name",
      "confirmation_remote": "$_person's currently playing track name",
      "canonical": "get currently playing track name",
      "formatted": [
        {
          "type": "text",
          "text": "The current playing song is ${song}."
        }
      ],
      "poll_interval": 60000,
      "is_list": false
    },
    "get_tempo": {
      "args": [
        {
          "name": "song",
          "type": "String",
          "question": "",
          "is_input": true,
          "required": false
        },
        {
          "name": "tempo",
          "type": "Number",
          "question": "",
          "is_input": false,
          "required": false
        }
      ],
      "doc": "retrieve the tempo",
      "confirmation": "retrieve the tempo",
      "confirmation_remote": "",
      "canonical": "retrieve the tempo",
      "formatted": [
        {
          "type": "text",
          "text": "The tempo of this track is ${tempo} beats per minute."
        }
      ],
      "poll_interval": 60000,
      "is_list": false
    },
    "get_danceability": {
      "args": [
        {
          "name": "song",
          "type": "String",
          "question": "",
          "is_input": true,
          "required": false
        },
        {
          "name": "danceability",
          "type": "Number",
          "question": "",
          "is_input": false,
          "required": false
        }
      ],
      "doc": "get danceability of this track",
      "confirmation": "danceability of this track",
      "confirmation_remote": "",
      "canonical": "danceability of this track",
      "formatted": [
        {
          "type": "text",
          "text": "On a scale from 0 to 1, the danceability of this track is ${danceability}."
        }
      ],
      "poll_interval": 60000,
      "is_list": false
    },
    "get_acousticness": {
      "args": [
        {
          "name": "song",
          "type": "String",
          "question": "",
          "is_input": true,
          "required": false
        },
        {
          "name": "acousticness",
          "type": "Number",
          "question": "",
          "is_input": false,
          "required": false
        }
      ],
      "doc": "acousticness of this track",
      "confirmation": "acousticness of this track",
      "confirmation_remote": "",
      "canonical": "acousticness of this track",
      "formatted": [
        {
          "type": "text",
          "text": "'On a scale from 0 to 1, the acousticness of this track is ${acousticness}."
        }
      ],
      "poll_interval": 60000,
      "is_list": false
    },
    "get_energy": {
      "args": [
        {
          "name": "song",
          "type": "String",
          "question": "",
          "is_input": true,
          "required": false
        },
        {
          "name": "energy",
          "type": "Number",
          "question": "",
          "is_input": false,
          "required": false
        }
      ],
      "doc": "energy of this track",
      "confirmation": "energy of this track",
      "confirmation_remote": "",
      "canonical": "energy of this track",
      "formatted": [
        {
          "type": "text",
          "text": "On a scale from 0 to 1, the energy of this track is ${energy}."
        }
      ],
      "poll_interval": 60000,
      "is_list": false
    },
    "get_speechiness": {
      "args": [
        {
          "name": "song",
          "type": "String",
          "question": "",
          "is_input": true,
          "required": false
        },
        {
          "name": "speechness",
          "type": "Number",
          "question": "",
          "is_input": false,
          "required": false
        }
      ],
      "doc": "get speechiness of this track",
      "confirmation": "speechiness of this track",
      "confirmation_remote": "",
      "canonical": "speechiness of this track",
      "formatted": [
        {
          "type": "text",
          "text": "On a scale from 0 to 1, the speechiness of this track is ${speechness}."
        }
      ],
      "poll_interval": 60000,
      "is_list": false
    },
    "get_valence": {
      "args": [
        {
          "name": "song",
          "type": "String",
          "question": "",
          "is_input": true,
          "required": false
        },
        {
          "name": "valence",
          "type": "Number",
          "question": "",
          "is_input": false,
          "required": false
        }
      ],
      "doc": "valence (positivity) of this track",
      "confirmation": "valence (positivity) of this track",
      "confirmation_remote": "",
      "canonical": "valence (positivity) of this track",
      "formatted": [
        {
          "type": "text",
          "text": "On a scale from 0 to 1, the valence of this track is ${valence}"
        }
      ],
      "poll_interval": 60000,
      "is_list": false
    },
    "get_liveness": {
      "args": [
        {
          "name": "song",
          "type": "String",
          "question": "",
          "is_input": true,
          "required": false
        },
        {
          "name": "liveness",
          "type": "Number",
          "question": "",
          "is_input": false,
          "required": false
        }
      ],
      "doc": "liveness of this track",
      "confirmation": "liveness of this track",
      "confirmation_remote": "",
      "canonical": "liveness of this track",
      "formatted": [
        {
          "type": "text",
          "text": "On a scale from 0 to 1, the liveness of this track is ${liveness}."
        }
      ],
      "poll_interval": 60000,
      "is_list": false
    },
    "get_instrumentalness": {
      "args": [
        {
          "name": "song",
          "type": "String",
          "question": "",
          "is_input": true,
          "required": false
        },
        {
          "name": "instrumentalness",
          "type": "Number",
          "question": "",
          "is_input": false,
          "required": false
        }
      ],
      "doc": "instrumentalness of this track",
      "confirmation": "instrumentalness of this track",
      "confirmation_remote": "",
      "canonical": "instrumentalness of this track",
      "formatted": [
        {
          "type": "text",
          "text": "On a scale from 0 to 1, the instrumentalness of this track is ${instrumentalness}."
        }
      ],
      "poll_interval": 60000,
      "is_list": false
    },
    "get_loudness": {
      "args": [
        {
          "name": "song",
          "type": "String",
          "question": "",
          "is_input": true,
          "required": false
        },
        {
          "name": "loudness",
          "type": "Number",
          "question": "",
          "is_input": false,
          "required": false
        }
      ],
      "doc": "loudness of this track",
      "confirmation": "loudness of this track",
      "confirmation_remote": "",
      "canonical": "loudness of this track",
      "formatted": [
        {
          "type": "text",
          "text": "On a scale from -60 to 0 dB, the loudness of this track is ${loudness} dB."
        }
      ],
      "poll_interval": 60000,
      "is_list": false
    },
    "get_key": {
      "args": [
        {
          "name": "song",
          "type": "String",
          "question": "",
          "is_input": true,
          "required": false
        },
        {
          "name": "key",
          "type": "String",
          "question": "",
          "is_input": false,
          "required": false
        },
        {
          "name": "modality",
          "type": "String",
          "question": "",
          "is_input": false,
          "required": false
        }
      ],
      "doc": "key of this track",
      "confirmation": "key of this track",
      "confirmation_remote": "",
      "canonical": "key of this track",
      "formatted": [
        {
          "type": "text",
          "text": "The key of this track is ${key} ${modality}."
        }
      ],
      "poll_interval": 60000,
      "is_list": false
    },
    "get_time_signature": {
      "args": [
        {
          "name": "song",
          "type": "String",
          "question": "",
          "is_input": true,
          "required": false
        },
        {
          "name": "beats",
          "type": "Number",
          "question": "",
          "is_input": false,
          "required": false
        }
      ],
      "doc": "time signature of this track",
      "confirmation": "time signature of this track",
      "confirmation_remote": "",
      "canonical": "time signature of this track",
      "formatted": [
        {
          "type": "text",
          "text": "This track has ${beats} beats per measure."
        }
      ],
      "poll_interval": 60000,
      "is_list": false
    },
    "get_user_playlist": {
      "args": [
        {
          "name": "playlist",
          "type": "String",
          "question": "",
          "is_input": false,
          "required": false
        }
      ],
      "doc": "retrieve your Spotify playlist",
      "confirmation": "your Spotify playlist",
      "confirmation_remote": "$_person's Spotify playlist",
      "canonical": "get my spotify playlist",
      "formatted": [],
      "poll_interval": 86400000,
      "is_list": true
    },
    "get_user_playlist_track": {
      "args": [
        {
          "name": "playlist",
          "type": "String",
          "question": "Which playlist do you want?",
          "is_input": true,
          "required": true
        },
        {
          "name": "song",
          "type": "String",
          "question": "",
          "is_input": false,
          "required": false
        }
      ],
      "doc": "list songs in your Spotify playlist",
      "confirmation": "songs in your Spotify playlist ${playlist}",
      "confirmation_remote": "songs in $_person's Spotify playlist ${playlist}",
      "canonical": "get songs in my spotify playlist",
      "formatted": [
        {
          "type": "text",
          "text": "${song}"
        }
      ],
      "poll_interval": 86400000,
      "is_list": true
    }
  },
  "actions": {
    "player_pause": {
      "args": [],
      "doc": "pause playback",
      "confirmation": "pause playback",
      "confirmation_remote": "pause $_person's playback",
      "canonical": "pause playback",
      "formatted": [],
      "poll_interval": -1,
      "is_list": false
    },
    "player_play": {
      "args": [],
      "doc": "resume playback",
      "confirmation": "resume playback",
      "confirmation_remote": "resume $_person's playback",
      "canonical": "resume playback",
      "formatted": [],
      "poll_interval": -1,
      "is_list": false
    },
    "player_next": {
      "args": [],
      "doc": "go to the next song",
      "confirmation": "go to the next song",
      "confirmation_remote": "go to the next song",
      "canonical": "go to the next song",
      "formatted": [],
      "poll_interval": -1,
      "is_list": false
    },
    "player_previous": {
      "args": [],
      "doc": "go to the previous song",
      "confirmation": "go to the previous song",
      "confirmation_remote": "go to the previous song",
      "canonical": "go to the previous song",
      "formatted": [],
      "poll_interval": -1,
      "is_list": false
    },
    "player_shuffle": {
      "args": [
        {
          "name": "shuffle",
          "type": "Enum(on,off)",
          "question": "Should we set the shuffle state to 'on' or 'off'?",
          "is_input": true,
          "required": true
        }
      ],
      "doc": "set the shuffle state",
      "confirmation": "set the shuffle state",
      "confirmation_remote": "set the shuffle state",
      "canonical": "set the shuffle state",
      "formatted": [],
      "poll_interval": -1,
      "is_list": false
    },
    "player_repeat": {
      "args": [
        {
          "name": "repeat",
          "type": "Enum(track,context,off)",
          "question": "Should we set the repeat state to 'track', 'context', or 'off'?",
          "is_input": true,
          "required": true
        }
      ],
      "doc": "set the repeat state",
      "confirmation": "set the repeat state",
      "confirmation_remote": "set the repeat state",
      "canonical": "set the repeat state",
      "formatted": [],
      "poll_interval": -1,
      "is_list": false
    },
    "play_album": {
      "args": [
        {
          "name": "toPlay",
          "type": "String",
          "question": "What album would you like to play?",
          "is_input": true,
          "required": true
        }
      ],
      "doc": "play an album",
      "confirmation": "play the album $toPlay",
      "confirmation_remote": "play the album $toPlay",
      "canonical": "play an album",
      "formatted": [],
      "poll_interval": -1,
      "is_list": false
    },
    "play_artist": {
      "args": [
        {
          "name": "toPlay",
          "type": "String",
          "question": "What artist would you like to play?",
          "is_input": true,
          "required": true
        }
      ],
      "doc": "play an artist",
      "confirmation": "play the artist $toPlay",
      "confirmation_remote": "play the artist $toPlay",
      "canonical": "play an artist",
      "formatted": [],
      "poll_interval": -1,
      "is_list": false
    },
    "play_playlist": {
      "args": [
        {
          "name": "toPlay",
          "type": "String",
          "question": "What playlist do you want to play?",
          "is_input": true,
          "required": true
        }
      ],
      "doc": "play the playlist",
      "confirmation": "play the playlist $toPlay",
      "confirmation_remote": "play the playlist $toPlay",
      "canonical": "play the playlist",
      "formatted": [],
      "poll_interval": -1,
      "is_list": false
    },
    "play_my_playlist": {
      "args": [
        {
          "name": "toPlay",
          "type": "String",
          "question": "Which one of your playlists do you want to play?",
          "is_input": true,
          "required": true
        }
      ],
      "doc": "play your playlist",
      "confirmation": "play your playlist $toPlay",
      "confirmation_remote": "play your playlist $toPlay",
      "canonical": "play your playlist",
      "formatted": [],
      "poll_interval": -1,
      "is_list": false
    },
    "play_seek_seconds": {
      "args": [
        {
          "name": "seconds",
          "type": "Measure(ms)",
          "question": "What timestamp (in seconds) should we seek to?",
          "is_input": true,
          "required": true
        }
      ],
      "doc": "seek in seconds",
      "confirmation": "seek the track to $seconds seconds",
      "confirmation_remote": "seek the track to $seconds seconds",
      "canonical": "seek the track in seconds",
      "formatted": [],
      "poll_interval": -1,
      "is_list": false
    },
    "save_current_track": {
      "args": [],
      "doc": "save the currently playing track",
      "confirmation": "save the currently playing track",
      "confirmation_remote": "save the currently playing track",
      "canonical": "save the currently playing track",
      "formatted": [],
      "poll_interval": -1,
      "is_list": false
    },
    "create_new_playlist": {
      "args": [
        {
          "name": "title",
          "type": "String",
          "question": "What would you like to name your playlist?",
          "is_input": true,
          "required": true
        },
        {
          "name": "description",
          "type": "String",
          "question": "What description would you like to give your playlist?",
          "is_input": true,
          "required": false
        },
        {
          "name": "isPublic",
          "type": "String",
          "question": "Would you like your playlist to be public?",
          "is_input": true,
          "required": false
        }
      ],
      "doc": "create a new playlist",
      "confirmation": "create a new playlist named $title",
      "confirmation_remote": "create a new playlist named $title",
      "canonical": "create a new playlist",
      "formatted": [],
      "poll_interval": -1,
      "is_list": false
    },
    "add_album_to_playlist": {
      "args": [
        {
          "name": "toAdd",
          "type": "String",
          "question": "What album would you like to add to your playlist?",
          "is_input": true,
          "required": true
        },
        {
          "name": "playlist",
          "type": "String",
          "question": "What play list would you like to add to?",
          "is_input": true,
          "required": true
        }
      ],
      "doc": "add an album to a playlist",
      "confirmation": "add the album $toAdd to the playlist $playlist",
      "confirmation_remote": "add the album $toAdd to the playlist $playlist",
      "canonical": "add an album to a playlist",
      "formatted": [],
      "poll_interval": -1,
      "is_list": false
    },
    "add_this_song_to_playlist": {
      "args": [
        {
          "name": "playlist",
          "type": "String",
          "question": "What playlist would you like to add to?",
          "is_input": true,
          "required": true
        }
      ],
      "doc": "add this song to a playlist",
      "confirmation": "add this song to the playlist $playlist",
      "confirmation_remote": "add this song to the playlist $playlist",
      "canonical": "add this song to playlist",
      "formatted": [],
      "poll_interval": -1,
      "is_list": false
    },
    "play_songs": {
      "args": [
        {
          "name": "toPlay",
          "type": "String",
          "question": "List the songs you want to play, separated by the word \"comma\" or the comma symbol.",
          "is_input": true,
          "required": true
        }
      ],
      "doc": "play song(s)",
      "confirmation": "play the song(s) $toPlay",
      "confirmation_remote": "play the song(s) $toPlay",
      "canonical": "play the song(s)",
      "formatted": [],
      "poll_interval": -1,
      "is_list": false
    },
    "add_songs_to_playlist": {
      "args": [
        {
          "name": "toAdd",
          "type": "String",
          "question": "What songs would you like to add? List them separated by the word 'comma'.",
          "is_input": true,
          "required": true
        },
        {
          "name": "playlist",
          "type": "String",
          "question": "What playlist would you like to add to?",
          "is_input": true,
          "required": true
        }
      ],
      "doc": "add songs to a playlist",
      "confirmation": "add the songs $toAdd to the playlist $playlist",
      "confirmation_remote": "add the songs $toAdd to the playlist $playlist",
      "canonical": "add songs to a playlist",
      "formatted": [],
      "poll_interval": -1,
      "is_list": false
    }
  },
  "examples": [
    {
      "utterance": "play ${song} on Spotify",
      "program": "let action x := \\(song :String) -> @com.spotify.play_songs(toPlay=song);"
    },
    {
      "utterance": "on spotify play ${song}",
      "program": "let action x := \\(song :String) -> @com.spotify.play_songs(toPlay=song);"
    },
    {
      "utterance": "pause my spotify",
      "program": "let action x := @com.spotify.player_pause();"
    },
    {
      "utterance": "play my spotify",
      "program": "let action x := @com.spotify.player_play();"
    },
    {
      "utterance": "resume my spotify",
      "program": "let action x := @com.spotify.player_play();"
    },
    {
      "utterance": "play the next song on spotify",
      "program": "let action x := @com.spotify.player_next();"
    },
    {
      "utterance": "play the next song",
      "program": "let action x := @com.spotify.player_next();"
    },
    {
      "utterance": "skip this song",
      "program": "let action x := @com.spotify.player_next();"
    },
    {
      "utterance": "skip this song on spotify",
      "program": "let action x := @com.spotify.player_next();"
    },
    {
      "utterance": "go back",
      "program": "let action x := @com.spotify.player_previous();"
    },
    {
      "utterance": "play the previous song",
      "program": "let action x := @com.spotify.player_previous();"
    },
    {
      "utterance": "go back on spotify",
      "program": "let action x := @com.spotify.player_previous();"
    },
    {
      "utterance": "play the last song on spotify",
      "program": "let action x := @com.spotify.player_previous();"
    },
    {
      "utterance": "go back to the last song",
      "program": "let action x := @com.spotify.player_previous();"
    },
    {
      "utterance": "add ${song} to ${playlistName}",
      "program": "let action x := \\(song :String, playlistName :String) -> @com.spotify.add_songs_to_playlist(toAdd=song, playlist=playlistName);"
    },
    {
      "utterance": "add ${song} to ${playlistName} on Spotify",
      "program": "let action x := \\(song :String, playlistName :String) -> @com.spotify.add_songs_to_playlist(toAdd=song, playlist=playlistName);"
    },
    {
      "utterance": "how danceable is the current track",
      "program": "let table x := @com.spotify.get_danceability();"
    },
    {
      "utterance": "get the danceability of the current track",
      "program": "let table x := @com.spotify.get_danceability();"
    },
    {
      "utterance": "get the danceability of the current song",
      "program": "let table x := @com.spotify.get_danceability();"
    },
    {
      "utterance": "how dancey is this song",
      "program": "let table x := @com.spotify.get_danceability();"
    },
    {
      "utterance": "how danceable is this song",
      "program": "let table x := @com.spotify.get_danceability();"
    },
    {
      "utterance": "is this song dancey",
      "program": "let table x := @com.spotify.get_danceability();"
    },
    {
      "utterance": "how dancey is the song ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_danceability(song=song);"
    },
    {
      "utterance": "get the danceability of the song ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_danceability(song=song);"
    },
    {
      "utterance": "how dancey is ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_danceability(song=song);"
    },
    {
      "utterance": "get the danceability of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_danceability(song=song);"
    },
    {
      "utterance": "how loud is this song",
      "program": "let table x := @com.spotify.get_loudness();"
    },
    {
      "utterance": "get the loudness of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_loudness(song=song);"
    },
    {
      "utterance": "how loud is ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_loudness(song=song);"
    },
    {
      "utterance": "get the loudness of the current song",
      "program": "let table x := @com.spotify.get_loudness();"
    },
    {
      "utterance": "get the loudness of the current track",
      "program": "let table x := @com.spotify.get_loudness();"
    },
    {
      "utterance": "is this song live",
      "program": "let table x := @com.spotify.get_liveness();"
    },
    {
      "utterance": "what's the liveness of this song",
      "program": "let table x := @com.spotify.get_liveness();"
    },
    {
      "utterance": "get the liveness of the current song",
      "program": "let table x := @com.spotify.get_liveness();"
    },
    {
      "utterance": "is ${song} live",
      "program": "let table x := \\(song :String) -> @com.spotify.get_liveness(song=song);"
    },
    {
      "utterance": "what's the liveness of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_liveness(song=song);"
    },
    {
      "utterance": "get the liveness of the current track",
      "program": "let table x := @com.spotify.get_liveness();"
    },
    {
      "utterance": "get the liveness of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_liveness(song=song);"
    },
    {
      "utterance": "is this song acoustic",
      "program": "let table x := @com.spotify.get_acousticness();"
    },
    {
      "utterance": "get the acousticness of the current track",
      "program": "let table x := @com.spotify.get_acousticness();"
    },
    {
      "utterance": "get the acousticness of the current song",
      "program": "let table x := @com.spotify.get_acousticness();"
    },
    {
      "utterance": "get the acousticness of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_acousticness(song=song);"
    },
    {
      "utterance": "what's the acousticness of the current song",
      "program": "let table x := @com.spotify.get_acousticness();"
    },
    {
      "utterance": "what's the acousticness of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_acousticness(song=song);"
    },
    {
      "utterance": "what's the key of the current song",
      "program": "let table x := @com.spotify.get_key();"
    },
    {
      "utterance": "get the key of the current track",
      "program": "let table x := @com.spotify.get_key();"
    },
    {
      "utterance": "get the key of this song",
      "program": "let table x := @com.spotify.get_key();"
    },
    {
      "utterance": "get the key of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_key(song=song);"
    },
    {
      "utterance": "what's the key of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_key(song=song);"
    },
    {
      "utterance": "what is the energy of this song",
      "program": "let table x := @com.spotify.get_energy();"
    },
    {
      "utterance": "get the energy of the current track",
      "program": "let table x := @com.spotify.get_energy();"
    },
    {
      "utterance": "get the energy of the current song",
      "program": "let table x := @com.spotify.get_energy();"
    },
    {
      "utterance": "get the energy of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_energy(song=song);"
    },
    {
      "utterance": "what's the energy of the current song",
      "program": "let table x := @com.spotify.get_energy();"
    },
    {
      "utterance": "what's the energy of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_energy(song=song);"
    },
    {
      "utterance": "how energetic is ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_energy(song=song);"
    },
    {
      "utterance": "how energetic is the current song",
      "program": "let table x := @com.spotify.get_energy();"
    },
    {
      "utterance": "what is the speechiness of this song",
      "program": "let table x := @com.spotify.get_speechiness();"
    },
    {
      "utterance": "get the speechiness of the current track",
      "program": "let table x := @com.spotify.get_speechiness();"
    },
    {
      "utterance": "get the speechiness of the current song",
      "program": "let table x := @com.spotify.get_speechiness();"
    },
    {
      "utterance": "get the speechiness of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_speechiness(song=song);"
    },
    {
      "utterance": "what's the speechiness of the current song",
      "program": "let table x := @com.spotify.get_speechiness();"
    },
    {
      "utterance": "what's the speechiness of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_speechiness(song=song);"
    },
    {
      "utterance": "how speechlike is the current song",
      "program": "let table x := @com.spotify.get_speechiness();"
    },
    {
      "utterance": "how speechlike is ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_speechiness(song=song);"
    },
    {
      "utterance": "what is the instrumentalness of this song",
      "program": "let table x := @com.spotify.get_instrumentalness();"
    },
    {
      "utterance": "get the instrumentalness of the current track",
      "program": "let table x := @com.spotify.get_instrumentalness();"
    },
    {
      "utterance": "get the instrumentalness of the current song",
      "program": "let table x := @com.spotify.get_instrumentalness();"
    },
    {
      "utterance": "get the instrumentalness of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_instrumentalness(song=song);"
    },
    {
      "utterance": "what's the instrumentalness of the current song",
      "program": "let table x := @com.spotify.get_instrumentalness();"
    },
    {
      "utterance": "what's the instrumentalness of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_instrumentalness(song=song);"
    },
    {
      "utterance": "is the current song an instrumental",
      "program": "let table x := @com.spotify.get_instrumentalness();"
    },
    {
      "utterance": "is ${song} instrumental",
      "program": "let table x := \\(song :String) -> @com.spotify.get_instrumentalness(song=song);"
    },
    {
      "utterance": "get the time signature of the current song",
      "program": "let table x := @com.spotify.get_time_signature();"
    },
    {
      "utterance": "what's the time signature of the current track",
      "program": "let table x := @com.spotify.get_time_signature();"
    },
    {
      "utterance": "get the time signature",
      "program": "let table x := @com.spotify.get_time_signature();"
    },
    {
      "utterance": "get the time signature of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_time_signature(song=song);"
    },
    {
      "utterance": "what's the time signature of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_time_signature(song=song);"
    },
    {
      "utterance": "how upbeat is this song",
      "program": "let table x := @com.spotify.get_valence();"
    },
    {
      "utterance": "how positive is this song",
      "program": "let table x := @com.spotify.get_valence();"
    },
    {
      "utterance": "what's the valence of this song",
      "program": "let table x := @com.spotify.get_valence();"
    },
    {
      "utterance": "get the upbeatness of this track",
      "program": "let table x := @com.spotify.get_valence();"
    },
    {
      "utterance": "get the positivity of this song",
      "program": "let table x := @com.spotify.get_valence();"
    },
    {
      "utterance": "get the upbeatness",
      "program": "let table x := @com.spotify.get_valence();"
    },
    {
      "utterance": "get the valence of this track",
      "program": "let table x := @com.spotify.get_valence();"
    },
    {
      "utterance": "get the valence of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_valence(song=song);"
    },
    {
      "utterance": "how positive is ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_valence(song=song);"
    },
    {
      "utterance": "how upbeat is ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_valence(song=song);"
    },
    {
      "utterance": "what's the tempo of the current song",
      "program": "let table x := @com.spotify.get_tempo();"
    },
    {
      "utterance": "what's the bpm of the current song",
      "program": "let table x := @com.spotify.get_tempo();"
    },
    {
      "utterance": "what's the BPM of the current track",
      "program": "let table x := @com.spotify.get_tempo();"
    },
    {
      "utterance": "what's the tempo",
      "program": "let table x := @com.spotify.get_tempo();"
    },
    {
      "utterance": "get the tempo of the current song",
      "program": "let table x := @com.spotify.get_tempo();"
    },
    {
      "utterance": "get the bpm of the current track",
      "program": "let table x := @com.spotify.get_tempo();"
    },
    {
      "utterance": "what's the tempo of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_tempo(song=song);"
    },
    {
      "utterance": "get the tempo of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_tempo(song=song);"
    },
    {
      "utterance": "what's the bpm of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_tempo(song=song);"
    },
    {
      "utterance": "get the bpm of ${song}",
      "program": "let table x := \\(song :String) -> @com.spotify.get_tempo(song=song);"
    },
    {
      "utterance": "what song is currently playing",
      "program": "let table x := @com.spotify.get_currently_playing();"
    },
    {
      "utterance": "what's on right now",
      "program": "let table x := @com.spotify.get_currently_playing();"
    },
    {
      "utterance": "what song is currently playing",
      "program": "let table x := @com.spotify.get_currently_playing();"
    },
    {
      "utterance": "the currently playing song",
      "program": "let table x := @com.spotify.get_currently_playing();"
    },
    {
      "utterance": ", save the current track",
      "program": "let action x := @com.spotify.save_current_track();"
    },
    {
      "utterance": ", save whatever's playing to my library",
      "program": "let action x := @com.spotify.save_current_track();"
    },
    {
      "utterance": ", save this song",
      "program": "let action x := @com.spotify.save_current_track();"
    },
    {
      "utterance": ", seek to ${time} seconds in",
      "program": "let action x := \\(time :Measure(ms)) -> @com.spotify.play_seek_seconds(seconds=time);"
    },
    {
      "utterance": ", skip to ${time} seconds",
      "program": "let action x := \\(time :Measure(ms)) -> @com.spotify.play_seek_seconds(seconds=time);"
    },
    {
      "utterance": ", go to ${time} seconds",
      "program": "let action x := \\(time :Measure(ms)) -> @com.spotify.play_seek_seconds(seconds=time);"
    },
    {
      "utterance": ", turn shuffle ${state}",
      "program": "let action x := \\(state :Enum(on,off)) -> @com.spotify.player_shuffle(shuffle=state);"
    },
    {
      "utterance": ", turn ${state} shuffle",
      "program": "let action x := \\(state :Enum(on,off)) -> @com.spotify.player_shuffle(shuffle=state);"
    },
    {
      "utterance": ", turn ${state} shuffle",
      "program": "let action x := \\(state :Enum(on,off)) -> @com.spotify.player_shuffle(shuffle=state);"
    },
    {
      "utterance": ", shuffle my spotify",
      "program": "let action x := @com.spotify.player_shuffle(shuffle=enum(on));"
    },
    {
      "utterance": ", repeat this song",
      "program": "let action x := @com.spotify.player_repeat(repeat=enum(track));"
    },
    {
      "utterance": ", turn on repeat",
      "program": "let action x := @com.spotify.player_repeat(repeat=enum(track));"
    },
    {
      "utterance": ", turn off repeat",
      "program": "let action x := @com.spotify.player_repeat(repeat=enum(off));"
    },
    {
      "utterance": "play ${song}",
      "program": "let action x := \\(song :String) -> @com.spotify.play_songs(toPlay=song);"
    },
    {
      "utterance": "create a new playlist",
      "program": "let action x := @com.spotify.create_new_playlist();"
    },
    {
      "utterance": "create a new playlist named ${name}",
      "program": "let action x := \\(name :String) -> @com.spotify.create_new_playlist(title=name);"
    },
    {
      "utterance": "create a new playlist titled ${name}",
      "program": "let action x := \\(name :String) -> @com.spotify.create_new_playlist(title=name);"
    },
    {
      "utterance": "make a new playlist",
      "program": "let action x := @com.spotify.create_new_playlist();"
    },
    {
      "utterance": "new playlist",
      "program": "let action x := @com.spotify.create_new_playlist();"
    },
    {
      "utterance": "add a new playlist",
      "program": "let action x := @com.spotify.create_new_playlist();"
    },
    {
      "utterance": "create a playlist",
      "program": "let action x := @com.spotify.create_new_playlist();"
    },
    {
      "utterance": "make a playlist",
      "program": "let action x := @com.spotify.create_new_playlist();"
    },
    {
      "utterance": "add ${songName} to my playlist ${playlistName} ",
      "program": "let action x := \\(songName :String, playlistName :String) -> @com.spotify.add_songs_to_playlist(toAdd=songName, playlist=playlistName);"
    },
    {
      "utterance": "add ${songName} to my playlist",
      "program": "let action x := \\(songName :String) -> @com.spotify.add_songs_to_playlist(toAdd=songName);"
    },
    {
      "utterance": "add to playlist ${playlistName}",
      "program": "let action x := \\(playlistName :String) -> @com.spotify.add_songs_to_playlist(playlist=playlistName);"
    },
    {
      "utterance": "add a song to my playlist",
      "program": "let action x := @com.spotify.add_songs_to_playlist();"
    },
    {
      "utterance": "add a song to my playlist ${playlistName}",
      "program": "let action x := \\(playlistName :String) -> @com.spotify.add_songs_to_playlist(playlist=playlistName);"
    },
    {
      "utterance": "play the playlist ${playlist}",
      "program": "let action x := \\(playlist :String) -> @com.spotify.play_playlist(toPlay=playlist);"
    },
    {
      "utterance": "play a playlist",
      "program": "let action x := @com.spotify.play_playlist();"
    },
    {
      "utterance": "play the artist ${artist}",
      "program": "let action x := \\(artist :String) -> @com.spotify.play_artist(toPlay=artist);"
    },
    {
      "utterance": "play an artist",
      "program": "let action x := @com.spotify.play_artist();"
    },
    {
      "utterance": "play the album ${album}",
      "program": "let action x := \\(album :String) -> @com.spotify.play_album(toPlay=album);"
    },
    {
      "utterance": "play an album",
      "program": "let action x := @com.spotify.play_album();"
    },
    {
      "utterance": "play the song ${song}",
      "program": "let action x := \\(song :String) -> @com.spotify.play_songs(toPlay=song);"
    },
    {
      "utterance": "play a song",
      "program": "let action x := @com.spotify.play_songs();"
    },
    {
      "utterance": "add this to my playlist ${playlistName}",
      "program": "let action x := \\(playlistName :String) -> @com.spotify.add_this_song_to_playlist(playlist=playlistName);"
    },
    {
      "utterance": "add this to my playlist",
      "program": "let action x := @com.spotify.add_this_song_to_playlist();"
    },
    {
      "utterance": "add this song to playlist ${playlistName}",
      "program": "let action x := \\(playlistName :String) -> @com.spotify.add_this_song_to_playlist(playlist=playlistName);"
    },
    {
      "utterance": "add this song to my playlist",
      "program": "let action x := @com.spotify.add_this_song_to_playlist();"
    },
    {
      "utterance": "add  the currently playing song to my playlist ${playlistName}",
      "program": "let action x := \\(playlistName :String) -> @com.spotify.add_this_song_to_playlist(playlist=playlistName);"
    },
    {
      "utterance": "add whatever's playing to my playlist",
      "program": "let action x := @com.spotify.add_this_song_to_playlist();"
    },
    {
      "utterance": "add an album to my playlist",
      "program": "let action x := @com.spotify.add_album_to_playlist();"
    },
    {
      "utterance": "add the album ${albumName} to my playlist",
      "program": "let action x := \\(albumName :String) -> @com.spotify.add_album_to_playlist(toAdd=albumName);"
    },
    {
      "utterance": "add the album to my playlist ${albumName}",
      "program": "let action x := \\(albumName :String) -> @com.spotify.add_album_to_playlist(toAdd=albumName);"
    },
    {
      "utterance": "add the album ${albumName} to my playlist ${playlistName}",
      "program": "let action x := \\(albumName :String, playlistName :String) -> @com.spotify.add_album_to_playlist(toAdd=albumName);"
    },
    {
      "utterance": "play my playlist ${playlistName}",
      "program": "let action x := \\(playlistName :String) -> @com.spotify.play_my_playlist(toPlay=playlistName);"
    },
    {
      "utterance": "play my playlist",
      "program": "let action x := @com.spotify.play_my_playlist();"
    },
    {
      "utterance": "my playlist",
      "program": "let table x := @com.spotify.get_user_playlist();"
    },
    {
      "utterance": "songs in my playlist",
      "program": "let table x := @com.spotify.get_user_playlist_track();"
    },
    {
      "utterance": "songs in my playlist ${p_playlist}",
      "program": "let table x := \\(p_playlist :String) -> @com.spotify.get_user_playlist_track(playlist=p_playlist);"
    },
    {
      "utterance": "play $artist",
      "program": "let action x := \\(artist :String) -> @com.spotify.play_artist(toPlay=artist);"
    },
    {
      "utterance": "my favorite songs",
      "program": "let table x := @com.spotify.get_user_top_tracks();"
    },
    {
      "utterance": "my top tracks",
      "program": "let table x := @com.spotify.get_user_top_tracks();"
    },
    {
      "utterance": "when my top tracks changes",
      "program": "let stream x := monitor(@com.spotify.get_user_top_tracks());"
    },
    {
      "utterance": "when I have new favorite songs",
      "program": "let stream x := monitor(@com.spotify.get_user_top_tracks());"
    }
  ]
}