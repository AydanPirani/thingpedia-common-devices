{
    "module_type": "org.thingpedia.v2",
    "params": {},
    "category": "online",
    "subcategory": "service",
    "types": [],
    "child_types": [],
    "auth": {
        "type": "oauth2"
    },
    "queries": {
        "time_estimate": {
            "args": [
                {
                    "name": "start",
                    "type": "Location",
                    "question": "Where do you want to call Uber?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "uber_type",
                    "type": "Enum(pool,uber_x,uber_xl,uber_black,select,suv,assist)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "estimate",
                    "type": "Measure(ms)",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "returns ETAs for all Uber products (pool, uberX, select, etc.) offered at a given location",
            "confirmation": "ETAs for uber services at $start",
            "confirmation_remote": "",
            "canonical": "get time estimate on uber",
            "formatted": [
                {
                    "type": "text",
                    "text": "Estimate for ${uber_type}: ${estimate:min} min"
                }
            ],
            "poll_interval": 60000,
            "is_list": false
        },
        "price_estimate": {
            "args": [
                {
                    "name": "start",
                    "type": "Location",
                    "question": "Where do you want to be picked up?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "end",
                    "type": "Location",
                    "question": "Where do you want to go?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "uber_type",
                    "type": "Enum(pool,uber_x,uber_xl,uber_black,select,suv,assist)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "low_estimate",
                    "type": "Currency",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "high_estimate",
                    "type": "Currency",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "surge",
                    "type": "Number",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "duration",
                    "type": "Measure(ms)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "distance",
                    "type": "Measure(m)",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "returns estimated prices for a given trip on all available products",
            "confirmation": "estimated prices for Uber from $start to $end",
            "confirmation_remote": "",
            "canonical": "get price estimate on uber",
            "formatted": [
                {
                    "type": "text",
                    "text": "Estimate for ${uber_type}: between ${low_estimate} and ${high_estimate} (${surge}x surge). Distance: ${distance:km} km, Time: ${duration:min} min"
                }
            ],
            "poll_interval": 60000,
            "is_list": false
        },
        "current": {
            "args": [
                {
                    "name": "status",
                    "type": "String",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "vehicle",
                    "type": "String",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "vehicle_picture",
                    "type": "Entity(tt:picture)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "driver",
                    "type": "String",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "driver_picture",
                    "type": "Entity(tt:picture)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "eta",
                    "type": "Measure(ms)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "from",
                    "type": "Location",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "to",
                    "type": "Location",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "Get current Uber ride",
            "confirmation": "your current Uber ride status",
            "confirmation_remote": "$__person's current Uber ride status",
            "canonical": "get current uber ride",
            "formatted": [
                {
                    "type": "text",
                    "text": "Your ride from ${from} to ${to} is ${status}, eta: ${eta:min}"
                },
                {
                    "type": "text",
                    "text": "${driver}"
                },
                {
                    "type": "picture",
                    "url": "${driver_picture}"
                },
                {
                    "type": "text",
                    "text": "${vehicle}"
                },
                {
                    "type": "picture",
                    "url": "${vehicle_picture}"
                }
            ],
            "poll_interval": 60000,
            "is_list": false
        }
    },
    "actions": {
        "request": {
            "args": [
                {
                    "name": "start",
                    "type": "Location",
                    "question": "Where do you want to call Uber?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "end",
                    "type": "Location",
                    "question": "Where to you want to go? ",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "uber_type",
                    "type": "Enum(pool,uber_x,uber_xl,uber_black,select,suv,assist)",
                    "question": "What type of uber do you want to call? ",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "seat_count",
                    "type": "Number",
                    "question": "How many seats? ",
                    "is_input": true,
                    "required": false
                }
            ],
            "doc": "Request an uber ride ",
            "confirmation": "request an Uber ride from $start to $end",
            "confirmation_remote": "request an Uber ride from $start to $end from $__person's Uber account",
            "canonical": "request uber ride",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        }
    },
    "examples": [
        {
            "utterance": "time estimate for uber",
            "program": "let table x := @com.uber.time_estimate();"
        },
        {
            "utterance": "a price estimate for uber from $p_start to $p_end",
            "program": "let table x := \\(p_start :Location, p_end :Location) -> @com.uber.price_estimate(start=p_start, end=p_end);"
        },
        {
            "utterance": "the price of an uber from $p_start to $p_end",
            "program": "let table x := \\(p_start :Location, p_end :Location) -> @com.uber.price_estimate(start=p_start, end=p_end);"
        },
        {
            "utterance": "a price estimate for uber $p_uber_type from $p_start to $p_end",
            "program": "let table x := \\(p_start :Location, p_end :Location, p_uber_type :Enum(pool,uber_x,uber_xl,uber_black,select,suv,assist)) -> (@com.uber.price_estimate(start=p_start, end=p_end)), uber_type == p_uber_type;"
        },
        {
            "utterance": "time estimate for uber around $p_start",
            "program": "let table x := \\(p_start :Location) -> @com.uber.time_estimate(start=p_start);"
        },
        {
            "utterance": "eta for uber at $p_start",
            "program": "let table x := \\(p_start :Location) -> @com.uber.time_estimate(start=p_start);"
        },
        {
            "utterance": "eta for uber of type $p_uber_type at $p_start",
            "program": "let table x := \\(p_start :Location, p_uber_type :Enum(pool,uber_x,uber_xl,uber_black,select,suv,assist)) -> (@com.uber.time_estimate(start=p_start)), uber_type == p_uber_type;"
        },
        {
            "utterance": "the distance of uber at $p_start",
            "program": "let table x := \\(p_start :Location) -> @com.uber.time_estimate(start=p_start);"
        },
        {
            "utterance": "the distance of the closest uber at $p_start",
            "program": "let table x := \\(p_start :Location) -> @com.uber.time_estimate(start=p_start);"
        },
        {
            "utterance": "the cost of an uber from $p_start to $p_end",
            "program": "let table x := \\(p_start :Location, p_end :Location) -> @com.uber.price_estimate(start=p_start, end=p_end);"
        },
        {
            "utterance": "request an $p_uber_type from $p_start to $p_end",
            "program": "let action x := \\(p_uber_type :Enum(pool,uber_x,uber_xl,uber_black,select,suv,assist), p_start :Location, p_end :Location) -> @com.uber.request(start=p_start, end=p_end, uber_type=p_uber_type);"
        },
        {
            "utterance": "get status of my current ride",
            "program": "let table x := @com.uber.current();"
        },
        {
            "utterance": "request an uber from $p_start to $p_end",
            "program": "let action x := \\(p_start :Location, p_end :Location) -> @com.uber.request(start=p_start, end=p_end);"
        },
        {
            "utterance": "request an uber ",
            "program": "let action x := @com.uber.request();"
        },
        {
            "utterance": "call uber",
            "program": "let action x := @com.uber.request();"
        },
        {
            "utterance": "order uber",
            "program": "let action x := @com.uber.request();"
        },
        {
            "utterance": "order an uber from $p_start to $p_end",
            "program": "let action x := \\(p_start :Location, p_end :Location) -> @com.uber.request(start=p_start, end=p_end);"
        }
    ]
}
