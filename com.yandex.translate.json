{
    "module_type": "org.thingpedia.v2",
    "params": {},
    "category": "data",
    "subcategory": "service",
    "types": [],
    "child_types": [],
    "auth": {
        "type": "none"
    },
    "queries": {
        "translate": {
            "args": [
                {
                    "name": "source_language",
                    "type": "Entity(tt:iso_lang_code)",
                    "question": "What's the source language? Use an ISO language code like it, en or zh.",
                    "is_input": true,
                    "required": false
                },
                {
                    "name": "target_language",
                    "type": "Entity(tt:iso_lang_code)",
                    "question": "What's the target language? Use an ISO language code like it, en or zh.",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "text",
                    "type": "String",
                    "question": "What do you want to translate?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "translated_text",
                    "type": "String",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "Translate text from source to destination language",
            "confirmation": "the translation of $text to $target_language",
            "confirmation_remote": "",
            "canonical": "translate on ytranslate",
            "formatted": [
                {
                    "type": "text",
                    "text": "${translated_text}"
                }
            ],
            "poll_interval": -1,
            "is_list": false
        },
        "detect_language": {
            "args": [
                {
                    "name": "text",
                    "type": "String",
                    "question": "What text do you want to analyze?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "value",
                    "type": "Entity(tt:iso_lang_code)",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "returns the ISO code of the guessed language of the given text",
            "confirmation": "the language of $text ",
            "confirmation_remote": "",
            "canonical": "detect language on ytranslate",
            "formatted": [
                {
                    "type": "text",
                    "text": "Detected as ${value}."
                }
            ],
            "poll_interval": -1,
            "is_list": false
        }
    },
    "actions": {},
    "examples": [
        {
            "utterance": "the translation of $p_text to $p_target_language with yandex",
            "program": "let table x := \\(p_text :String, p_target_language :Entity(tt:iso_lang_code)) -> @com.yandex.translate.translate(text=p_text, target_language=p_target_language);"
        },
        {
            "utterance": "the translation of $p_text from $p_source_language to $p_target_language with yandex",
            "program": "let table x := \\(p_text :String, p_source_language :Entity(tt:iso_lang_code), p_target_language :Entity(tt:iso_lang_code)) -> @com.yandex.translate.translate(text=p_text, source_language=p_source_language, target_language=p_target_language);"
        },
        {
            "utterance": "the translation of $p_text to $p_target_language",
            "program": "let table x := \\(p_text :String, p_target_language :Entity(tt:iso_lang_code)) -> @com.yandex.translate.translate(text=p_text, target_language=p_target_language);"
        },
        {
            "utterance": "the translation of $p_text from $p_source_language to $p_target_language",
            "program": "let table x := \\(p_text :String, p_source_language :Entity(tt:iso_lang_code), p_target_language :Entity(tt:iso_lang_code)) -> @com.yandex.translate.translate(text=p_text, source_language=p_source_language, target_language=p_target_language);"
        },
        {
            "utterance": "the language of $p_text",
            "program": "let table x := \\(p_text :String) -> @com.yandex.translate.detect_language(text=p_text);"
        },
        {
            "utterance": "the language $p_text is written in",
            "program": "let table x := \\(p_text :String) -> @com.yandex.translate.detect_language(text=p_text);"
        },
        {
            "utterance": "the language yandex detects $p_text as",
            "program": "let table x := \\(p_text :String) -> @com.yandex.translate.detect_language(text=p_text);"
        },
        {
            "utterance": ", translate $p_text to $p_target_language",
            "program": "let table x := \\(p_text :String, p_target_language :Entity(tt:iso_lang_code)) -> @com.yandex.translate.translate(text=p_text, target_language=p_target_language);"
        },
        {
            "utterance": ", translate $p_text from $p_source_language to $p_target_language",
            "program": "let table x := \\(p_text :String, p_source_language :Entity(tt:iso_lang_code), p_target_language :Entity(tt:iso_lang_code)) -> @com.yandex.translate.translate(text=p_text, source_language=p_source_language, target_language=p_target_language);"
        },
        {
            "utterance": ", detect the language of $p_text",
            "program": "let table x := \\(p_text :String) -> @com.yandex.translate.detect_language(text=p_text);"
        },
        {
            "utterance": ", detect what language ${p_text:const} is written in",
            "program": "let table x := \\(p_text :String) -> @com.yandex.translate.detect_language(text=p_text);"
        }
    ]
}
