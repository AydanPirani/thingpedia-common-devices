dataset @io.home-assistant.awning language "en" {

  program := now => @io.home-assistant.awning.state() => notify
  #_[utterances=["is my awning open?",
                 "are my awnings closed?",
                 "check if my awning is extended",
                 "are the awnings out?",
                 "did I retract the awnings?",
                 "check whether the awnings are retracted"]];

  query := @io.home-assistant.awning.state()
  #_[utterances=["if my awning is open or closed",
                 "whether my awnings are open or closed",
                 "if I extended the awning",
                 "whether the awning is extended or retracted"]];

  stream := monitor @io.home-assistant.awning.state()
  #_[utterances=["when the state of the awning changes"]];

  stream (p_state : Enum(open, closed)) := edge( @io.home-assistant.awning.state()) on (state == p_state)
  #_[utterances=["when my awning becomes ${p_state}",
                "if the awnings are ${p_state}",
                "if my awning gets ${p_state}"]];

  stream := edge( @io.home-assistant.awning.state()) on (state == enum(open))
  #_[utterances=["if my awning is open",
                "when the awnings are open",
                "when I extend my awnings",
                "the moment the awnings get extended"]];

  stream := edge( @io.home-assistant.awning.state()) on (state == enum(closed))
  #_[utterances=["when my awnings close",
                "if the awning becomes closed",
                "the moment the awnings get retracted",
                "when the awnings finish retracting"]];

  action (p_state :Enum(open,close))  := @io.home-assistant.awning.set_openclose(state=p_state)
  #_[utterances=["${p_state} my awnings",
                 "${p_state} the awning"]];

  action := @io.home-assistant.awning.set_openclose(state=enum(open))
  #_[utterances=["open my awning for me",
                "extend the awnings",
                "make the awnings extend"]];

  action := @io.home-assistant.awning.set_openclose(state=enum(close))
  #_[utterances=["close my awning",
                "retract the awnings"]];

  program (p_name : String) := now => @io.home-assistant.awning(name=p_name).state() => notify
  #_[utterances=["is my ${p_name} awning open?",
                 "are my ${p_name} awnings closed?",
                 "check if my ${p_name} awning is extended",
                 "are the ${p_name} awnings out?",
                 "did I retract the ${p_name} awnings?",
                 "check whether the ${p_name} awnings are retracted"]];

  query (p_name : String) := @io.home-assistant.awning(name=p_name).state()
  #_[utterances=["if my ${p_name} awning is open or closed",
                 "whether my ${p_name} awnings are open or closed",
                 "if I extended the ${p_name} awning",
                 "whether the ${p_name} awning is extended or retracted"]];

  stream (p_name : String) := monitor @io.home-assistant.awning(name=p_name).state()
  #_[utterances=["when the state of the ${p_name} awning changes"]];

  stream (p_name : String, p_state : Enum(open, closed)) := edge( @io.home-assistant.awning(name=p_name).state()) on (state == p_state)
  #_[utterances=["when my ${p_name} awning becomes ${p_state}",
                "if the ${p_name} awnings are ${p_state}",
                "if my ${p_name} awning gets ${p_state}"]];

  stream (p_name : String) := edge( @io.home-assistant.awning(name=p_name).state()) on (state == enum(open))
  #_[utterances=["if my ${p_name} awning is open",
                "when the ${p_name} awnings are open",
                "when I extend my ${p_name} awnings",
                "the moment the ${p_name} awnings get extended"]];

  stream (p_name : String) := edge( @io.home-assistant.awning(name=p_name).state()) on (state == enum(closed))
  #_[utterances=["when my ${p_name} awnings close",
                "if the ${p_name} awning becomes closed",
                "the moment the ${p_name} awnings get retracted",
                "when the ${p_name} awnings finish retracting"]];

  action (p_name : String, p_state :Enum(open,close))  := @io.home-assistant.awning(name=p_name).set_openclose(state=p_state)
  #_[utterances=["${p_state} my ${p_name} awnings",
                 "${p_state} the ${p_name} awning"]];

  action (p_name : String) := @io.home-assistant.awning(name=p_name).set_openclose(state=enum(open))
  #_[utterances=["open my ${p_name} awning for me",
                "extend the ${p_name} awnings",
                "make the ${p_name} awnings extend"]];

  action (p_name : String) := @io.home-assistant.awning(name=p_name).set_openclose(state=enum(close))
  #_[utterances=["close my ${p_name} awning",
                "retract the ${p_name} awnings"]];
}