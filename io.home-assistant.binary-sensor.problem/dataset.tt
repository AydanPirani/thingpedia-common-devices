dataset @io.home-assistant.binary-sensor.problem language "en" {

  program := now => @io.home-assistant.binary-sensor.problem.state() => notify
  #_[utterances=["what is the state of my problem sensor?",
                "what is my problem sensor showing?",
                "what does my problem sensor say?",
                "is my problem sensor detecting a problem?",
                "check if my problem sensor is detecting a problem",
                "is my problem sensor detecting any problem?",
                "check if my problem sensor is detecting any problem",
                "is my problem sensor not detecting a problem?",
                "check if my problem sensor is not detecting a problem",
                "check if my problem sensor is detecting a problem or not detecting a problem",
                "check if my problem sensor is detecting any problem or not detecting a problem"]];

  query := @io.home-assistant.binary-sensor.problem.state()
  #_[utterances=["the state of my problem sensor",
                "if my problem sensor is detecting a problem or not detecting a problem",
                "whether my problem sensor is detecting a problem or not detecting a problem",
                "if my problem sensor is detecting any problem or not detecting a problem",
                "whether my problem sensor is detecting any problem or not detecting a problem"]];

  stream := monitor @io.home-assistant.binary-sensor.problem.state()
  #_[utterances=[["when the state of my problem sensor changes",
                 "when my problem sensor changes state",
                 "when my problem sensor changes"]];

  stream (p_state : Enum(detecting_problem, not_detecting_problem)) := edge( @io.home-assistant.binary-sensor.problem.state()) on (state == p_state)
  #_[utterances=["when my problem sensor becomes ${p_state}",
                "when my problem sensor is ${p_state}",
                "when my problem sensor turns ${p_state}",
                "when my problem sensor changes to ${p_state}",
                "if my problem sensor becomes ${p_state}",
                "if my problem sensor is ${p_state}",
                "if my problem sensor turns ${p_state}",
                "if my problem sensor changes to ${p_state}"]];

  stream := edge( @io.home-assistant.binary-sensor.problem.state()) on (state == enum(detecting_problem))
  #_[utterances=["when my problem sensor becomes detecting a problem",
                "when my problem sensor turns detecting a problem",
                "when my problem sensor changes to detecting a problem",
                "if my problem sensor becomes detecting a problem",
                "if my problem sensor turns detecting a problem",
                "if my problem sensor changes to detecting a problem",
                "when my problem sensor becomes detecting any problem",
                "when my problem sensor turns detecting any problem",
                "when my problem sensor changes to detecting any problem",
                "if my problem sensor becomes detecting any problem",
                "if my problem sensor turns detecting any problem",
                "if my problem sensor changes to detecting any problem"]];

  stream := edge( @io.home-assistant.binary-sensor.problem.state()) on (state == enum(not_detecting_problem))
  #_[utterances=["when my problem sensor becomes not detecting a problem",
                "when my problem sensor turns not detecting a problem",
                "when my problem sensor changes to not detecting a problem",
                "if my problem sensor becomes not detecting a problem",
                "if my problem sensor turns not detecting a problem",
                "if my problem sensor changes to not detecting a problem",
                "when my problem sensor becomes not detecting any problem",
                "when my problem sensor turns not detecting any problem",
                "when my problem sensor changes to not detecting any problem",
                "if my problem sensor becomes not detecting any problem",
                "if my problem sensor turns not detecting any problem",
                "if my problem sensor changes to not detecting any problem"]];

  program (p_name : String) := now => @io.home-assistant.binary-sensor.problem(name=p_name).state() => notify
  #_[utterances=["what is the state of my ${p_name} problem sensor?",
                "what is my ${p_name} problem sensor showing?",
                "what does my ${p_name} problem sensor say?",
                "is my ${p_name} problem sensor detecting a problem?",
                "check if my ${p_name} problem sensor is detecting a problem",
                "is my ${p_name} problem sensor detecting any problem?",
                "check if my ${p_name} problem sensor is detecting any problem",
                "is my ${p_name} problem sensor not detecting a problem?",
                "check if my ${p_name} problem sensor is not detecting a problem",
                "check if my ${p_name} problem sensor is detecting a problem or not detecting a problem",
                "check if my ${p_name} problem sensor is detecting any problem or not detecting a problem"]];

  query (p_name : String) := @io.home-assistant.binary-sensor.problem(name=p_name).state()
  #_[utterances=["the state of my ${p_name} problem sensor",
                "if my ${p_name} problem sensor is detecting a problem or not detecting a problem",
                "whether my ${p_name} problem sensor is detecting a problem or not detecting a problem",
                "if my ${p_name} problem sensor is detecting any problem or not detecting a problem",
                "whether my ${p_name} problem sensor is detecting any problem or not detecting a problem"]];

  stream (p_name : String) := monitor @io.home-assistant.binary-sensor.problem(name=p_name).state()
  #_[utterances=[["when the state of my ${p_name} problem sensor changes",
                 "when my ${p_name} problem sensor changes state",
                 "when my ${p_name} problem sensor changes"]];

  stream (p_name : String, p_state : Enum(detecting_problem, not_detecting_problem)) := edge( @io.home-assistant.binary-sensor.problem(name=p_name).state()) on (state == p_state)
  #_[utterances=["when my ${p_name} problem sensor becomes ${p_state}",
                "when my ${p_name} problem sensor is ${p_state}",
                "when my ${p_name} problem sensor turns ${p_state}",
                "when my ${p_name} problem sensor changes to ${p_state}",
                "if my ${p_name} problem sensor becomes ${p_state}",
                "if my ${p_name} problem sensor is ${p_state}",
                "if my ${p_name} problem sensor turns ${p_state}",
                "if my ${p_name} problem sensor changes to ${p_state}"]];

  stream (p_name : String) := edge( @io.home-assistant.binary-sensor.problem(name=p_name).state()) on (state == enum(detecting_problem))
  #_[utterances=["when my ${p_name} problem sensor becomes detecting a problem",
                "when my ${p_name} problem sensor turns detecting a problem",
                "when my ${p_name} problem sensor changes to detecting a problem",
                "if my ${p_name} problem sensor becomes detecting a problem",
                "if my ${p_name} problem sensor turns detecting a problem",
                "if my ${p_name} problem sensor changes to detecting a problem",
                "when my ${p_name} problem sensor becomes detecting any problem",
                "when my ${p_name} problem sensor turns detecting any problem",
                "when my ${p_name} problem sensor changes to detecting any problem",
                "if my ${p_name} problem sensor becomes detecting any problem",
                "if my ${p_name} problem sensor turns detecting any problem",
                "if my ${p_name} problem sensor changes to detecting any problem"]];

  stream (p_name : String) := edge( @io.home-assistant.binary-sensor.problem(name=p_name).state()) on (state == enum(not_detecting_problem))
  #_[utterances=["when my ${p_name} problem sensor becomes not detecting a problem",
                "when my ${p_name} problem sensor turns not detecting a problem",
                "when my ${p_name} problem sensor changes to not detecting a problem",
                "if my ${p_name} problem sensor becomes not detecting a problem",
                "if my ${p_name} problem sensor turns not detecting a problem",
                "if my ${p_name} problem sensor changes to not detecting a problem",
                "when my ${p_name} problem sensor becomes not detecting any problem",
                "when my ${p_name} problem sensor turns not detecting any problem",
                "when my ${p_name} problem sensor changes to not detecting any problem",
                "if my ${p_name} problem sensor becomes not detecting any problem",
                "if my ${p_name} problem sensor turns not detecting any problem",
                "if my ${p_name} problem sensor changes to not detecting any problem"]];
}