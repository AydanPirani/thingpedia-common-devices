dataset @io.home-assistant.blind language "en" {

  program := now => @io.home-assistant.blind.state() => notify
  #_[utterances=["are my blinds open?",
                 "are my blinds closed?",
                 "check if my blinds are raised",
                 "are my blinds put down?",
                 "did I raise the blinds?",
                 "check whether the blinds are lowered"]];

  query := @io.home-assistant.blind.state()
  #_[utterances=["if my blinds are open or closed",
                 "whether my blinds are open or closed",
                 "if I raised the blinds",
                 "whether the blinds are raised or lowered"]];

  stream := monitor @io.home-assistant.blind.state()
  #_[utterances=["when the state of the blinds change"]];

  stream (p_state : Enum(open, closed)) := edge( monitor @io.home-assistant.blind.state()) on (state == p_state)
  #_[utterances=["when the blinds are ${p_state}",
                "if my blinds gets ${p_state}"]];

  stream := edge( monitor @io.home-assistant.blind.state()) on (state == enum(open))
  #_[utterances=["if my blinds are raised",
                "when the blinds are put up",
                "when I bring up my blinds"]];

  stream := edge( monitor @io.home-assistant.blind.state()) on (state == enum(closed))
  #_[utterances=["when my blinds lower",
                "if the blinds get lowered",
                "the moment the blinds get put down",
                "when the blinds finish lowering"]];

  action := @io.home-assistant.blind.set_openclose()
  #_[utterances=["draw my blinds"]];

  action (p_state :Enum(open,close)) := @io.home-assistant.blind.set_openclose(state=p_state)
  #_[utterances=["${p_state} my blinds",
                 "${p_state} the blinds"]];

  action := @io.home-assistant.blind.set_openclose(state=enum(open))
  #_[utterances=["open my blinds for me",
                "raise the blinds",
                "put the blinds up"]];

  action := @io.home-assistant.blind.set_openclose(state=enum(close))
  #_[utterances=["close my blinds",
                "lower the blinds",
                "put the blinds down"]];

  program (p_name : String) := now => @io.home-assistant.blind(name=p_name).state() => notify
  #_[utterances=["are my ${p_name} blinds open?",
                 "are my ${p_name} blinds closed?",
                 "check if my ${p_name} blinds are raised",
                 "are my ${p_name} blinds put down?",
                 "did I raise the ${p_name} blinds?",
                 "check whether the ${p_name} blinds are lowered"]];

  query (p_name : String) := @io.home-assistant.blind(name=p_name).state()
  #_[utterances=["if my ${p_name} blinds are open or closed",
                 "whether my ${p_name} blinds are open or closed",
                 "if I raised the ${p_name} blinds",
                 "whether the ${p_name} blinds is raised or lowered"]];

  stream (p_name : String) := monitor @io.home-assistant.blind(name=p_name).state()
  #_[utterances=["when the state of the ${p_name} blinds change"]];

  stream (p_name : String, p_state : Enum(open, closed)) := edge( monitor @io.home-assistant.blind(name=p_name).state()) on (state == p_state)
  #_[utterances=["when the ${p_name} blinds are ${p_state}",
                "if my ${p_name} blinds gets ${p_state}"]];

  stream (p_name : String) := edge( monitor @io.home-assistant.blind(name=p_name).state()) on (state == enum(open))
  #_[utterances=["if my ${p_name} blinds are raised",
                "when the ${p_name} blinds are put up",
                "when I bring up my ${p_name} blinds"]];

  stream (p_name : String) := edge( monitor @io.home-assistant.blind(name=p_name).state()) on (state == enum(closed))
  #_[utterances=["when my ${p_name} blinds lower",
                "if the ${p_name} blinds get lowered",
                "the moment the ${p_name} blinds get put down",
                "when the ${p_name} blinds finish lowering"]];

  action (p_name : String) := @io.home-assistant.blind(name=p_name).set_openclose()
  #_[utterances=["draw my ${p_name} blinds"]];

  action (p_name : String, p_state :Enum(open,close)) := @io.home-assistant.blind(name=p_name).set_openclose(state=p_state)
  #_[utterances=["${p_state} my ${p_name} blinds",
                 "${p_state} the ${p_name} blinds"]];

  action (p_name : String) := @io.home-assistant.blind(name=p_name).set_openclose(state=enum(open))
  #_[utterances=["open my ${p_name} blinds for me",
                "raise the ${p_name} blinds",
                "put the ${p_name} blinds up"]];

  action (p_name : String) := @io.home-assistant.blind(name=p_name).set_openclose(state=enum(close))
  #_[utterances=["close my ${p_name} blinds",
                "lower the ${p_name} blinds",
                "put the ${p_name} blinds down"]];
}