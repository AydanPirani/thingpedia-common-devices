dataset @io.home-assistant.connectivity language "en" {

  program := now => @io.home-assistant.connectivity.state() => notify
  #_[utterances=["is the router connected?",
                 "check if the router is connected",
                 "is the router disconnected?",
                 "check if the router is disconnected",
                 "check if the router is connected or disconnected"]];

  query := @io.home-assistant.connectivity.state()
  #_[utterances=["the state of the router",
                 "if the router is connected or disconnected",
                 "whether the router is connected or disconnected"]];

  stream := monitor @io.home-assistant.connectivity.state()
  #_[utterances=["when the state of the router changes"]];

  stream (p_state : Enum(connected, disconnected)) := edge( @io.home-assistant.connectivity.state()) on (state == p_state)
  #_[utterances=["when the router becomes ${p_state}",
                "when the router is ${p_state}",
                "when the router turns ${p_state}",
                "when the router changes to ${p_state}",
                "if the router becomes ${p_state}",
                "if the router is ${p_state}",
                "if the router turns ${p_state}",
                "if the router changes to ${p_state}"]];

  stream := edge( @io.home-assistant.connectivity.state()) on (state == enum(connected))
  #_[utterances=["when the router is connected",
                "if the router is connected",
                "when the router becomes connected",
                "if the router becomes connected",
                "when the router turns connected",
                "if the router turns connected",
                "when the router gets connected",
                "if the router gets connected"]];

  stream := edge( @io.home-assistant.connectivity.state()) on (state == enum(disconnected))
  #_[utterances=["when the router is disconnected",
                "if the router is disconnected",
                "when the router becomes disconnected",
                "if the router becomes disconnected",
                "when the router turns disconnected",
                "if the router turns disconnected",
                "when the router gets disconnected",
                "if the router gets disconnected"]];

  program (p_name : String) := now => @io.home-assistant.connectivity(name=p_name).state() => notify
  #_[utterances=["is the ${p_name} router connected?",
                 "check if the ${p_name} router is connected",
                 "is the ${p_name} router disconnected?",
                 "check if the ${p_name} router is disconnected",
                 "check if the ${p_name} router is connected or disconnected"]];

  query (p_name : String) := @io.home-assistant.connectivity(name=p_name).state()
  #_[utterances=["the state of the ${p_name} router",
                 "if the ${p_name} router is connected or disconnected",
                 "whether the ${p_name} router is connected or disconnected"]];

  stream (p_name : String) := monitor @io.home-assistant.connectivity(name=p_name).state()
  #_[utterances=["when the state of the ${p_name} router changes"]];

  stream (p_name : String, p_state : Enum(connected, disconnected)) := edge( @io.home-assistant.connectivity(name=p_name).state()) on (state == p_state)
  #_[utterances=["when the ${p_name} router becomes ${p_state}",
                "when the ${p_name} router is ${p_state}",
                "when the ${p_name} router turns ${p_state}",
                "when the ${p_name} router changes to ${p_state}",
                "if the ${p_name} router becomes ${p_state}",
                "if the ${p_name} router is ${p_state}",
                "if the ${p_name} router turns ${p_state}",
                "if the ${p_name} router changes to ${p_state}"]];

  stream (p_name : String) := edge( @io.home-assistant.connectivity(name=p_name).state()) on (state == enum(connected))
  #_[utterances=["when the ${p_name} router is connected",
                "if the ${p_name} router is connected",
                "when the ${p_name} router becomes connected",
                "if the ${p_name} router becomes connected",
                "when the ${p_name} router turns connected",
                "if the ${p_name} router turns connected",
                "when the ${p_name} router gets connected",
                "if the ${p_name} router gets connected"]];

  stream (p_name : String) := edge( @io.home-assistant.connectivity(name=p_name).state()) on (state == enum(disconnected))
  #_[utterances=["when the ${p_name} router is disconnected",
                "if the ${p_name} router is disconnected",
                "when the ${p_name} router becomes disconnected",
                "if the ${p_name} router becomes disconnected",
                "when the ${p_name} router turns disconnected",
                "if the ${p_name} router turns disconnected",
                "when the ${p_name} router gets disconnected",
                "if the ${p_name} router gets disconnected"]];
}