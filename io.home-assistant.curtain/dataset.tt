dataset @io.home-assistant.curtain language "en" {

  program := now => @io.home-assistant.curtain.state() => notify
  #_[utterances=["is my curtain open?",
                 "are my curtains closed?",
                 "check if my curtain is raised",
                 "are my curtains put down?",
                 "did I raise the curtains?",
                 "check whether the curtains are lowered"]];

  query := @io.home-assistant.curtain.state()
  #_[utterances=["if my curtains are open or closed",
                 "whether my curtains are open or closed",
                 "if I raised the curtains",
                 "whether the curtains is raised or lowered"]];

  stream := monitor @io.home-assistant.curtain.state()
  #_[utterances=["when the state of the curtains change"]];

  stream (p_state : Enum(open, closed)) := edge( @io.home-assistant.curtain.state()) on (state == p_state)
  #_[utterances=["when the curtains are ${p_state}",
                "if my curtains gets ${p_state}"]];

  stream := edge( @io.home-assistant.curtain.state()) on (state == enum(open))
  #_[utterances=["if my curtains are raised",
                "when the curtains are put up",
                "when I bring up my curtains"]];

  stream := edge( @io.home-assistant.curtain.state()) on (state == enum(closed))
  #_[utterances=["when my curtains lower",
                "if the curtains get lowered",
                "the moment the curtains get put down",
                "when the curtains finish lowering"]];

  action := @io.home-assistant.curtain.set_openclose()
  #_[utterances=["draw my curtains"]];

  action (p_state :Enum(open,close)) := @io.home-assistant.curtain.set_openclose(state=p_state)
  #_[utterances=["${p_state} my curtains",
                 "${p_state} the curtains"]];

  action := @io.home-assistant.curtain.set_openclose(state=enum(open))
  #_[utterances=["keep my curtains",
                "pull the curtains open",
                "open my curtains for me",
                "raise the curtains",
                "put the curtains up"]];

  action := @io.home-assistant.curtain.set_openclose(state=enum(close))
  #_[utterances=["pull the curtains close",
                "close my curtains",
                "lower the curtains",
                "put the curtains down"]];

  program (p_name : String) := now => @io.home-assistant.curtain(name=p_name).state() => notify
  #_[utterances=["are my ${p_name} curtains open?",
                 "are my ${p_name} curtains closed?",
                 "check if my ${p_name} curtains are raised",
                 "are my ${p_name} curtains put down?",
                 "did I raise the ${p_name} curtains?",
                 "check whether the ${p_name} curtains are lowered"]];

  query (p_name : String) := @io.home-assistant.curtain(name=p_name).state()
  #_[utterances=["if my ${p_name} curtains are open or closed",
                 "whether my ${p_name} curtains are open or closed",
                 "if I raised the ${p_name} curtains",
                 "whether the ${p_name} curtains is raised or lowered"]];

  stream (p_name : String) := monitor @io.home-assistant.curtain(name=p_name).state()
  #_[utterances=["when the state of the ${p_name} curtains change"]];

  stream (p_name : String, p_state : Enum(open, closed)) := edge( @io.home-assistant.curtain(name=p_name).state()) on (state == p_state)
  #_[utterances=["when the ${p_name} curtains are ${p_state}",
                "if my ${p_name} curtains gets ${p_state}"]];

  stream (p_name : String) := edge( @io.home-assistant.curtain(name=p_name).state()) on (state == enum(open))
  #_[utterances=["if my ${p_name} curtains are raised",
                "when the ${p_name} curtains are put up",
                "when I bring up my ${p_name} curtains"]];

  stream (p_name : String) := edge( @io.home-assistant.curtain(name=p_name).state()) on (state == enum(closed))
  #_[utterances=["when my ${p_name} curtains lower",
                "if the ${p_name} curtains get lowered",
                "the moment the ${p_name} curtains get put down",
                "when the ${p_name} curtains finish lowering"]];

  action (p_name : String) := @io.home-assistant.curtain(name=p_name).set_openclose()
  #_[utterances=["draw my ${p_name} curtains"]];

  action (p_name : String, p_state :Enum(open,close)) := @io.home-assistant.curtain(name=p_name).set_openclose(state=p_state)
  #_[utterances=["${p_state} my ${p_name} curtains",
                 "${p_state} the ${p_name} curtains"]];

  action (p_name : String) := @io.home-assistant.curtain(name=p_name).set_openclose(state=enum(open))
  #_[utterances=["keep my ${p_name} curtains",
                "pull the ${p_name} curtains open",
                "open my ${p_name} curtains for me",
                "raise the ${p_name} curtains",
                "put the ${p_name} curtains up"]];

  action (p_name : String) := @io.home-assistant.curtain(name=p_name).set_openclose(state=enum(close))
  #_[utterances=["pull the ${p_name} curtains close",
                "close my ${p_name} curtains",
                "lower the ${p_name} curtains",
                "put the ${p_name} curtains down"]];
}