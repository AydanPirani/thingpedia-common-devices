dataset @io.home-assistant.damper language "en" {

  program := now => @io.home-assistant.damper.state() => notify
  #_[utterances=["is my damper open?",
                 "is my damper closed?"]];

  query := @io.home-assistant.damper.state()
  #_[utterances=["if my damper is open or closed",
                 "whether my damper is open or closed"]];

  stream := monitor @io.home-assistant.damper.state()
  #_[utterances=["when the state of the damper changes"]];

  stream (p_state : Enum(open, closed)) := edge( @io.home-assistant.damper.state()) on (state == p_state)
  #_[utterances=["when the damper is ${p_state}",
                "if my damper gets ${p_state}"]];

  stream := edge( @io.home-assistant.damper.state()) on (state == enum(open))
  #_[utterances=["if my damper is raised",
                "when my damper raises"]];

  stream := edge( @io.home-assistant.damper.state()) on (state == enum(closed))
  #_[utterances=["if my damper is lowered",
                "when my damper lowers"]];

  action (p_state :Enum(open,close)) := @io.home-assistant.damper.set_openclose(state=p_state)
  #_[utterances=["${p_state} my damper",
                 "${p_state} the damper"]];

  action := @io.home-assistant.damper.set_openclose(state=enum(open))
  #_[utterances=["open my damper for me",
                "raise the damper",
                "put the damper up"]];

  action := @io.home-assistant.damper.set_openclose(state=enum(close))
  #_[utterances=["close my damper",
                "lower the damper",
                "put the damper down"]];

  program (p_name : String) := now => @io.home-assistant.damper(name=p_name).state() => notify
  #_[utterances=["is my ${p_name} damper open?",
                 "is the ${p_name} damper closed?"]];

  query (p_name : String) := @io.home-assistant.damper(name=p_name).state()
  #_[utterances=["if the damper is open or closed",
                 "whether my ${p_name} damper is open or closed"]];

  stream (p_name : String) := monitor @io.home-assistant.damper(name=p_name).state()
  #_[utterances=["when the state of the ${p_name} damper changes"]];

  stream (p_name : String, p_state : Enum(open, closed)) := edge( @io.home-assistant.damper(name=p_name).state()) on (state == p_state)
  #_[utterances=["when the ${p_name} damper is ${p_state}",
                "if my ${p_name} damper gets ${p_state}"]];

  stream (p_name : String) := edge( @io.home-assistant.damper(name=p_name).state()) on (state == enum(open))
  #_[utterances=["if my ${p_name} damper is raised",
                "when the ${p_name} damper raises"]];

  stream (p_name : String) := edge( @io.home-assistant.damper(name=p_name).state()) on (state == enum(closed))
  #_[utterances=["if the ${p_name} damper is lowered",
                "when my ${p_name} damper lowers"]];

  action (p_name : String, p_state :Enum(open,close)) := @io.home-assistant.damper(name=p_name).set_openclose(state=p_state)
  #_[utterances=["${p_state} my ${p_name} damper",
                 "${p_state} the ${p_name} damper"]];

  action (p_name : String) := @io.home-assistant.damper(name=p_name).set_openclose(state=enum(open))
  #_[utterances=["open my ${p_name} damper for me",
                "raise the ${p_name} damper",
                "put the ${p_name} damper up"]];

  action (p_name : String) := @io.home-assistant.damper(name=p_name).set_openclose(state=enum(close))
  #_[utterances=["close my ${p_name} damper",
                "lower the ${p_name} damper",
                "put the ${p_name} damper down"]];
}