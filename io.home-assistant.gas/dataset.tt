dataset @io.home-assistant.gas language "en" {

  program := now => @io.home-assistant.gas.state() => notify
  #_[utterances=["is the gas sensor detecting gas?",
                 "check if the gas sensor is detecting gas",
                 "is the gas sensor detecting any gas?",
                 "check if the gas sensor is detecting any gas",
                 "is the gas sensor not detecting gas?",
                 "check if the gas sensor is not detecting gas",
                 "check if the gas sensor is detecting gas or not detecting gas",
                 "check if the gas sensor is detecting any gas or not detecting gas"]];

  query := @io.home-assistant.gas.state()
  #_[utterances=["the state of the gas sensor",
                 "if the gas sensor is detecting gas or not detecting gas",
                 "whether the gas sensor is detecting gas or not detecting gas",
                 "if the gas sensor is detecting any gas or not detecting gas",
                 "whether the gas sensor is detecting any gas or not detecting gas"]];

  stream := monitor @io.home-assistant.gas.state()
  #_[utterances=["when the state of the gas sensor changes"]];

  stream (p_state : Enum(detecting_gas, not_detecting_gas)) := edge( @io.home-assistant.gas.state()) on (state == p_state)
  #_[utterances=["when the gas sensor becomes ${p_state}",
                "when the gas sensor is ${p_state}",
                "when the gas sensor turns ${p_state}",
                "when the gas sensor changes to ${p_state}",
                "if the gas sensor becomes ${p_state}",
                "if the gas sensor is ${p_state}",
                "if the gas sensor turns ${p_state}",
                "if the gas sensor changes to ${p_state}"]];

  stream := edge( @io.home-assistant.gas.state()) on (state == enum(detecting_gas))
  #_[utterances=["when the gas sensor detects gas",
                "if the gas sensor detects gas",
                "when the gas sensor detects any gas",
                "if the gas sensor detects any gas",
                "when the gas sensor is detecting gas",
                "if the gas sensor is detecting gas"]];

  stream := edge( @io.home-assistant.gas.state()) on (state == enum(not_detecting_gas))
  #_[utterances=["when the gas sensor stops detecting gas",
                "if the gas sensor stops detecting gas",
                "when the gas sensor is not detecting gas",
                "if the gas sensor is not detecting gas"]];

  program (p_name : String) := now => @io.home-assistant.gas(name=p_name).state() => notify
  #_[utterances=["is the ${p_name} gas sensor detecting gas?",
                 "check if the ${p_name} gas sensor is detecting gas",
                 "is the ${p_name} gas sensor detecting any gas?",
                 "check if the ${p_name} gas sensor is detecting any gas",
                 "is the ${p_name} gas sensor not detecting gas?",
                 "check if the ${p_name} gas sensor is not detecting gas",
                 "check if the ${p_name} gas sensor is detecting gas or not detecting gas",
                 "check if the ${p_name} gas sensor is detecting any gas or not detecting gas"]];

  query (p_name : String) := @io.home-assistant.gas(name=p_name).state()
  #_[utterances=["the state of the ${p_name} gas sensor",
                 "if the ${p_name} gas sensor is detecting gas or not detecting gas",
                 "whether the ${p_name} gas sensor is detecting gas or not detecting gas",
                 "if the ${p_name} gas sensor is detecting any gas or not detecting gas",
                 "whether the ${p_name} gas sensor is detecting any gas or not detecting gas"]];

  stream (p_name : String) := monitor @io.home-assistant.gas(name=p_name).state()
  #_[utterances=["when the state of the ${p_name} gas sensor changes"]];

  stream (p_name : String, p_state : Enum(detecting_gas, not_detecting_gas)) := edge( @io.home-assistant.gas(name=p_name).state()) on (state == p_state)
  #_[utterances=["when the ${p_name} gas sensor becomes ${p_state}",
                "when the ${p_name} gas sensor is ${p_state}",
                "when the ${p_name} gas sensor turns ${p_state}",
                "when the ${p_name} gas sensor changes to ${p_state}",
                "if the ${p_name} gas sensor becomes ${p_state}",
                "if the ${p_name} gas sensor is ${p_state}",
                "if the ${p_name} gas sensor turns ${p_state}",
                "if the ${p_name} gas sensor changes to ${p_state}"]];

  stream (p_name : String) := edge( @io.home-assistant.gas(name=p_name).state()) on (state == enum(detecting_gas))
  #_[utterances=["when the ${p_name} gas sensor detects gas",
                "if the ${p_name} gas sensor detects gas",
                "when the ${p_name} gas sensor detects any gas",
                "if the ${p_name} gas sensor detects any gas",
                "when the ${p_name} gas sensor is detecting gas",
                "if the ${p_name} gas sensor is detecting gas"]];

  stream (p_name : String) := edge( @io.home-assistant.gas(name=p_name).state()) on (state == enum(not_detecting_gas))
  #_[utterances=["when the ${p_name} gas sensor stops detecting gas",
                "if the ${p_name} gas sensor stops detecting gas",
                "when the ${p_name} gas sensor is not detecting gas",
                "if the ${p_name} gas sensor is not detecting gas"]];
}