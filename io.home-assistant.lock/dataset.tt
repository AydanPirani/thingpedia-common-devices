dataset @io.home-assistant.lock language "en" {

  program := now => @io.home-assistant.lock.state() => notify
  #_[utterances=["is my lock unlocked?",
                 "check if my lock is unlocked",
                 "is my lock open?",
                 "check if my lock is open",
                 "is my lock locked?",
                 "check if my lock is locked",
                 "is my lock closed?",
                 "check if my lock is closed",
                 "check if my lock is unlocked or locked",
                 "check if my lock is unlocked or closed",
                 "check if my lock is open or locked",
                 "check if my lock is open or closed",
                 "is the lock unlocked?",
                 "check if the lock is unlocked",
                 "is the lock open?",
                 "check if the lock is open",
                 "is the lock locked?",
                 "check if the lock is locked",
                 "is the lock closed?",
                 "check if the lock is closed",
                 "check if the lock is unlocked or locked",
                 "check if the lock is unlocked or closed",
                 "check if the lock is open or locked",
                 "check if the lock is open or closed"]];

  query := @io.home-assistant.lock.state()
  #_[utterances=["the state of my lock",
                 "if my lock is unlocked or locked",
                 "whether my lock is unlocked or locked",
                 "if my lock is unlocked or closed",
                 "whether my lock is unlocked or closed",
                 "if my lock is open or locked",
                 "whether my lock is open or locked",
                 "if my lock is open or closed",
                 "whether my lock is open or closed",
                 "the state of the lock",
                 "if the lock is unlocked or locked",
                 "whether the lock is unlocked or locked",
                 "if the lock is unlocked or closed",
                 "whether the lock is unlocked or closed",
                 "if the lock is open or locked",
                 "whether the lock is open or locked",
                 "if the lock is open or closed",
                 "whether the lock is open or closed"]];

  stream := monitor @io.home-assistant.lock.state()
  #_[utterances=["when the state of my lock changes",
                 "when the state of the lock changes"]];

  stream (p_state : Enum(unlocked, locked)) := edge( @io.home-assistant.lock.state()) on (state == p_state)
  #_[utterances=["when my lock becomes ${p_state}",
                "when my lock is ${p_state}",
                "when my lock turns ${p_state}",
                "when my lock changes to ${p_state}",
                "if my lock becomes ${p_state}",
                "if my lock is ${p_state}",
                "if my lock turns ${p_state}",
                "if my lock changes to ${p_state}",
                "when the lock becomes ${p_state}",
                "when the lock is ${p_state}",
                "when the lock turns ${p_state}",
                "when the lock changes to ${p_state}",
                "if the lock becomes ${p_state}",
                "if the lock is ${p_state}",
                "if the lock turns ${p_state}",
                "if the lock changes to ${p_state}"]];

  stream := edge( @io.home-assistant.lock.state()) on (state == enum(unlocked))
  #_[utterances=["when my lock opens",
                "if my lock opens",
                "when the lock opens",
                "if the lock opens",
                "when my lock unlocks",
                "if my lock unlocks",
                "when the lock unlocks",
                "if the lock unlocks",
                "when my lock is unlocked",
                "if my lock is unlocked",
                "when the lock is unlocked",
                "if the lock is unlocked",
                "when my lock becomes unlocked",
                "if my lock becomes unlocked",
                "when the lock becomes unlocked",
                "if the lock becomes unlocked",
                "when my lock turns unlocked",
                "if my lock turns unlocked",
                "when the lock turns unlocked",
                "if the lock turns unlocked",
                "when my lock gets unlocked",
                "if my lock gets unlocked",
                "when the lock gets unlocked",
                "if the lock gets unlocked"]];

  stream := edge( @io.home-assistant.lock.state()) on (state == enum(locked))
  #_[utterances=["when my lock closes",
                "if my lock closes",
                "when the lock closes",
                "if the lock closes",
                "when my lock locks",
                "if my lock locks",
                "when the lock locks",
                "if the lock locks",
                "when my lock is locked",
                "if my lock is locked",
                "when the lock is locked",
                "if the lock is locked",
                "when my lock becomes locked",
                "if my lock becomes locked",
                "when the lock becomes locked",
                "if the lock becomes locked",
                "when my lock turns locked",
                "if my lock turns locked",
                "when the lock turns locked",
                "if the lock turns locked",
                "when my lock gets locked",
                "if my lock gets locked",
                "when the lock gets locked",
                "if the lock gets locked"]];

  program (p_name : String) := now => @io.home-assistant.lock(name=p_name).state() => notify
  #_[utterances=["is my ${p_name} lock unlocked?",
                 "check if my ${p_name} lock is unlocked",
                 "is my ${p_name} lock open?",
                 "check if my ${p_name} lock is open",
                 "is my ${p_name} lock locked?",
                 "check if my ${p_name} lock is locked",
                 "is my ${p_name} lock closed?",
                 "check if my ${p_name} lock is closed",
                 "check if my ${p_name} lock is unlocked or locked",
                 "check if my ${p_name} lock is unlocked or closed",
                 "check if my ${p_name} lock is open or locked",
                 "check if my ${p_name} lock is open or closed",
                 "is the ${p_name} lock unlocked?",
                 "check if the ${p_name} lock is unlocked",
                 "is the ${p_name} lock open?",
                 "check if the ${p_name} lock is open",
                 "is the ${p_name} lock locked?",
                 "check if the ${p_name} lock is locked",
                 "is the ${p_name} lock closed?",
                 "check if the ${p_name} lock is closed",
                 "check if the ${p_name} lock is unlocked or locked",
                 "check if the ${p_name} lock is unlocked or closed",
                 "check if the ${p_name} lock is open or locked",
                 "check if the ${p_name} lock is open or closed"]];

  query (p_name : String) := @io.home-assistant.lock(name=p_name).state()
  #_[utterances=["the state of my ${p_name} lock",
                 "if my ${p_name} lock is unlocked or locked",
                 "whether my ${p_name} lock is unlocked or locked",
                 "if my ${p_name} lock is unlocked or closed",
                 "whether my ${p_name} lock is unlocked or closed",
                 "if my ${p_name} lock is open or locked",
                 "whether my ${p_name} lock is open or locked",
                 "if my ${p_name} lock is open or closed",
                 "whether my ${p_name} lock is open or closed",
                 "the state of the ${p_name} lock",
                 "if the ${p_name} lock is unlocked or locked",
                 "whether the ${p_name} lock is unlocked or locked",
                 "if the ${p_name} lock is unlocked or closed",
                 "whether the ${p_name} lock is unlocked or closed",
                 "if the ${p_name} lock is open or locked",
                 "whether the ${p_name} lock is open or locked",
                 "if the ${p_name} lock is open or closed",
                 "whether the ${p_name} lock is open or closed"]];

  stream (p_name : String) := monitor @io.home-assistant.lock(name=p_name).state()
  #_[utterances=["when the state of my ${p_name} lock changes",
                 "when the state of the ${p_name} lock changes"]];

  stream (p_name : String, p_state : Enum(unlocked, locked)) := edge( @io.home-assistant.lock(name=p_name).state()) on (state == p_state)
  #_[utterances=["when my ${p_name} lock becomes ${p_state}",
                "when my ${p_name} lock is ${p_state}",
                "when my ${p_name} lock turns ${p_state}",
                "when my ${p_name} lock changes to ${p_state}",
                "if my ${p_name} lock becomes ${p_state}",
                "if my ${p_name} lock is ${p_state}",
                "if my ${p_name} lock turns ${p_state}",
                "if my ${p_name} lock changes to ${p_state}",
                "when the ${p_name} lock becomes ${p_state}",
                "when the ${p_name} lock is ${p_state}",
                "when the ${p_name} lock turns ${p_state}",
                "when the ${p_name} lock changes to ${p_state}",
                "if the ${p_name} lock becomes ${p_state}",
                "if the ${p_name} lock is ${p_state}",
                "if the ${p_name} lock turns ${p_state}",
                "if the ${p_name} lock changes to ${p_state}"]];

  stream (p_name : String) := edge( @io.home-assistant.lock(name=p_name).state()) on (state == enum(unlocked))
  #_[utterances=["when my ${p_name} lock opens",
                "if my ${p_name} lock opens",
                "when the ${p_name} lock opens",
                "if the ${p_name} lock opens",
                "when my ${p_name} lock unlocks",
                "if my ${p_name} lock unlocks",
                "when the ${p_name} lock unlocks",
                "if the ${p_name} lock unlocks",
                "when my ${p_name} lock is unlocked",
                "if my ${p_name} lock is unlocked",
                "when the ${p_name} lock is unlocked",
                "if the ${p_name} lock is unlocked",
                "when my ${p_name} lock becomes unlocked",
                "if my ${p_name} lock becomes unlocked",
                "when the ${p_name} lock becomes unlocked",
                "if the ${p_name} lock becomes unlocked",
                "when my ${p_name} lock turns unlocked",
                "if my ${p_name} lock turns unlocked",
                "when the ${p_name} lock turns unlocked",
                "if the ${p_name} lock turns unlocked",
                "when my ${p_name} lock gets unlocked",
                "if my ${p_name} lock gets unlocked",
                "when the ${p_name} lock gets unlocked",
                "if the ${p_name} lock gets unlocked"]];

  stream (p_name : String) := edge( @io.home-assistant.lock(name=p_name).state()) on (state == enum(locked))
  #_[utterances=["when my ${p_name} lock closes",
                "if my ${p_name} lock closes",
                "when the ${p_name} lock closes",
                "if the ${p_name} lock closes",
                "when my ${p_name} lock locks",
                "if my ${p_name} lock locks",
                "when the ${p_name} lock locks",
                "if the ${p_name} lock locks",
                "when my ${p_name} lock is locked",
                "if my ${p_name} lock is locked",
                "when the ${p_name} lock is locked",
                "if the ${p_name} lock is locked",
                "when my ${p_name} lock becomes locked",
                "if my ${p_name} lock becomes locked",
                "when the ${p_name} lock becomes locked",
                "if the ${p_name} lock becomes locked",
                "when my ${p_name} lock turns locked",
                "if my ${p_name} lock turns locked",
                "when the ${p_name} lock turns locked",
                "if the ${p_name} lock turns locked",
                "when my ${p_name} lock gets locked",
                "if my ${p_name} lock gets locked",
                "when the ${p_name} lock gets locked",
                "if the ${p_name} lock gets locked"]];
}