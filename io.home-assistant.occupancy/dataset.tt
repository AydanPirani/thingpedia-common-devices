dataset @io.home-assistant.occupancy language "en" {

  program := now => @io.home-assistant.occupancy.state() => notify
  #_[utterances=["is the occupancy sensor occupied?",
                 "check if the occupancy sensor is occupied or empty",
                 "is the occupancy sensor empty?"]];

  query := @io.home-assistant.occupancy.state()
  #_[utterances=["the state of the occupancy sensor",
                 "if the occupancy sensor is occupied",
                 "whether the occupancy sensor is occupied or empty"]];

  stream := monitor @io.home-assistant.occupancy.state()
  #_[utterances=["when the state of the occupancy sensor changes"]];

  stream (p_state : Enum(occupied, unoccupied)) := edge( monitor @io.home-assistant.occupancy.state()) on (state == p_state)
  #_[utterances=["when the occupancy sensor becomes ${p_state}",
                "when the occupancy sensor is ${p_state}",
                "if the occupancy sensor turns ${p_state}",
                "if the occupancy sensor changes to ${p_state}"]];

  stream := edge( monitor @io.home-assistant.occupancy.state()) on (state == enum(occupied))
  #_[utterances=["when the occupancy sensor is occupied",
                "if the occupancy sensor becomes occupied"]];

  stream := edge( monitor @io.home-assistant.occupancy.state()) on (state == enum(unoccupied))
  #_[utterances=["when the occupancy sensor is not occupied",
                "if the occupancy sensor becomes not occupied"]];

  program (p_name : String) := now => @io.home-assistant.occupancy(name=p_name).state() => notify
  #_[utterances=["is the ${p_name} occupancy sensor occupied?",
                 "is the ${p_name} occupancy sensor empty?",
                 "check if the ${p_name} occupancy sensor is occupied or empty"]];

  query (p_name : String) := @io.home-assistant.occupancy(name=p_name).state()
  #_[utterances=["the state of the ${p_name} occupancy sensor",
                 "if the ${p_name} occupancy sensor is occupied",
                 "whether the ${p_name} occupancy sensor is occupied or empty"]];

  stream (p_name : String) := monitor @io.home-assistant.occupancy(name=p_name).state()
  #_[utterances=["when the state of the ${p_name} occupancy sensor changes"]];

  stream (p_name : String, p_state : Enum(occupied, unoccupied)) := edge( monitor @io.home-assistant.occupancy(name=p_name).state()) on (state == p_state)
  #_[utterances=["when the ${p_name} occupancy sensor becomes ${p_state}",
                "when the ${p_name} occupancy sensor is ${p_state}",
                "if the ${p_name} occupancy sensor turns ${p_state}",
                "if the ${p_name} occupancy sensor changes to ${p_state}"]];

  stream (p_name : String) := edge( monitor @io.home-assistant.occupancy(name=p_name).state()) on (state == enum(occupied))
  #_[utterances=["when the ${p_name} occupancy sensor is occupied",
                "if the ${p_name} occupancy sensor becomes occupied"]];

  stream (p_name : String) := edge( monitor @io.home-assistant.occupancy(name=p_name).state()) on (state == enum(unoccupied))
  #_[utterances=["when the ${p_name} occupancy sensor is not occupied",
                "if the ${p_name} occupancy sensor becomes not occupied"]];
}