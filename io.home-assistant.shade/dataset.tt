dataset @io.home-assistant.shade language "en" {

  program := now => @io.home-assistant.shade.state() => notify
  #_[utterances=["are my shades open?",
                 "are my shades closed?",
                 "check if my shades are raised",
                 "are my shades put down?",
                 "did I raise the shades?",
                 "check whether the shades are lowered"]];

  query := @io.home-assistant.shade.state()
  #_[utterances=["if my shades are open or closed",
                 "whether my shades are open or closed",
                 "if I raised the shades",
                 "whether the shades are raised or lowered"]];

  stream := monitor @io.home-assistant.shade.state()
  #_[utterances=["when the state of the shades change"]];

  stream (p_state : Enum(open, closed)) := edge( @io.home-assistant.shade.state()) on (state == p_state)
  #_[utterances=["when the shades are ${p_state}",
                "if my shades gets ${p_state}"]];

  stream := edge( @io.home-assistant.shade.state()) on (state == enum(open))
  #_[utterances=["if my shades are raised",
                "when the shades are put up",
                "when I bring up my shades"]];

  stream := edge( @io.home-assistant.shade.state()) on (state == enum(closed))
  #_[utterances=["when my shades lower",
                "if the shades get lowered",
                "the moment the shades get put down",
                "when the shades finish lowering"]];

  action := @io.home-assistant.shade.set_openclose()
  #_[utterances=["draw my shades"]];

  action (p_state :Enum(open,close)) := @io.home-assistant.shade.set_openclose(state=p_state)
  #_[utterances=["${p_state} my shades",
                 "${p_state} the shades"]];

  action := @io.home-assistant.shade.set_openclose(state=enum(open))
  #_[utterances=["open my shades for me",
                "raise the shades",
                "put the shades up"]];

  action := @io.home-assistant.shade.set_openclose(state=enum(close))
  #_[utterances=["close my shades",
                "lower the shades",
                "put the shades down"]];

  program (p_name : String) := now => @io.home-assistant.shade(name=p_name).state() => notify
  #_[utterances=["are my ${p_name} shades open?",
                 "are my ${p_name} shades closed?",
                 "check if my ${p_name} shades are raised",
                 "are my ${p_name} shades put down?",
                 "did I raise the ${p_name} shades?",
                 "check whether the ${p_name} shades are lowered"]];

  query (p_name : String) := @io.home-assistant.shade(name=p_name).state()
  #_[utterances=["if my ${p_name} shades are open or closed",
                 "whether my ${p_name} shades are open or closed",
                 "if I raised the ${p_name} shades",
                 "whether the ${p_name} shades is raised or lowered"]];

  stream (p_name : String) := monitor @io.home-assistant.shade(name=p_name).state()
  #_[utterances=["when the state of the ${p_name} shades change"]];

  stream (p_name : String, p_state : Enum(open, closed)) := edge( @io.home-assistant.shade(name=p_name).state()) on (state == p_state)
  #_[utterances=["when the ${p_name} shades are ${p_state}",
                "if my ${p_name} shades gets ${p_state}"]];

  stream (p_name : String) := edge( @io.home-assistant.shade(name=p_name).state()) on (state == enum(open))
  #_[utterances=["if my ${p_name} shades are raised",
                "when the ${p_name} shades are put up",
                "when I bring up my ${p_name} shades"]];

  stream (p_name : String) := edge( @io.home-assistant.shade(name=p_name).state()) on (state == enum(closed))
  #_[utterances=["when my ${p_name} shades lower",
                "if the ${p_name} shades get lowered",
                "the moment the ${p_name} shades get put down",
                "when the ${p_name} shades finish lowering"]];

  action (p_name : String) := @io.home-assistant.shade(name=p_name).set_openclose()
  #_[utterances=["draw my ${p_name} shades"]];

  action (p_name : String, p_state :Enum(open,close)) := @io.home-assistant.shade(name=p_name).set_openclose(state=p_state)
  #_[utterances=["${p_state} my ${p_name} shades",
                 "${p_state} the ${p_name} shades"]];

  action (p_name : String) := @io.home-assistant.shade(name=p_name).set_openclose(state=enum(open))
  #_[utterances=["open my ${p_name} shades for me",
                "raise the ${p_name} shades",
                "put the ${p_name} shades up"]];

  action (p_name : String) := @io.home-assistant.shade(name=p_name).set_openclose(state=enum(close))
  #_[utterances=["close my ${p_name} shades",
                "lower the ${p_name} shades",
                "put the ${p_name} shades down"]];
}