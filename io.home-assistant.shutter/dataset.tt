dataset @io.home-assistant.shutter language "en" {

  program := now => @io.home-assistant.shutter.state() => notify
  #_[utterances=["are my shutters open?",
                 "are my shutters closed?",
                 "check if my shutters are opened",
                 "did I close the shutters?"]];

  query := @io.home-assistant.shutter.state()
  #_[utterances=["if my shutters are open or closed",
                 "whether my shutters are open or closed",
                 "if I opened the shutters"]];

  stream := monitor @io.home-assistant.shutter.state()
  #_[utterances=["when the state of the shutters change"]];

  stream (p_state : Enum(open, closed)) := edge( @io.home-assistant.shutter.state()) on (state == p_state)
  #_[utterances=["when the shutters are ${p_state}",
                "if my shutters gets ${p_state}"]];

  stream := edge( @io.home-assistant.shutter.state()) on (state == enum(open))
  #_[utterances=["if my shutters are open"]];

  stream := edge( @io.home-assistant.shutter.state()) on (state == enum(closed))
  #_[utterances=["when my shutters close"]];

  action (p_state :Enum(open,close)) := @io.home-assistant.shutter.set_openclose(state=p_state)
  #_[utterances=["${p_state} my shutters",
                 "${p_state} the shutters"]];

  action := @io.home-assistant.shutter.set_openclose(state=enum(open))
  #_[utterances=["open my shutters for me",
                "help me open the shutters"]];

  action := @io.home-assistant.shutter.set_openclose(state=enum(close))
  #_[utterances=["close my shutters",
                "bring in the shutters"]];

  program (p_name : String) := now => @io.home-assistant.shutter(name=p_name).state() => notify
  #_[utterances=["are my ${p_name} shutters open?",
                 "are my ${p_name} shutters closed?",
                 "check if my ${p_name} shutters are opened",
                 "did I close the ${p_name} shutters?"]];

  query (p_name : String) := @io.home-assistant.shutter(name=p_name).state()
  #_[utterances=["if my ${p_name} shutters are open or closed",
                 "whether my ${p_name} shutters are open or closed",
                 "if I opened the ${p_name} shutters"]];

  stream (p_name : String) := monitor @io.home-assistant.shutter(name=p_name).state()
  #_[utterances=["when the state of the ${p_name} shutters change"]];

  stream (p_name : String, p_state : Enum(open, closed)) := edge( @io.home-assistant.shutter(name=p_name).state()) on (state == p_state)
  #_[utterances=["when the ${p_name} shutters are ${p_state}",
                "if my ${p_name} shutters gets ${p_state}"]];

  stream (p_name : String) := edge( @io.home-assistant.shutter(name=p_name).state()) on (state == enum(open))
  #_[utterances=["if my ${p_name} shutters are open"]];

  stream (p_name : String) := edge( @io.home-assistant.shutter(name=p_name).state()) on (state == enum(closed))
  #_[utterances=["when my ${p_name} shutters close"]];

  action (p_name : String, p_state :Enum(open,close)) := @io.home-assistant.shutter(name=p_name).set_openclose(state=p_state)
  #_[utterances=["${p_state} my ${p_name} shutters",
                 "${p_state} the ${p_name} shutters"]];

  action (p_name : String) := @io.home-assistant.shutter(name=p_name).set_openclose(state=enum(open))
  #_[utterances=["open my ${p_name} shutters for me",
                "help me open the ${p_name} shutters"]];

  action (p_name : String) := @io.home-assistant.shutter(name=p_name).set_openclose(state=enum(close))
  #_[utterances=["close my ${p_name} shutters",
                "bring in the ${p_name} shutters"]];
}