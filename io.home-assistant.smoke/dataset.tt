dataset @io.home-assistant.smoke language "en" {

  program := now => @io.home-assistant.smoke.state() => notify
  #_[utterances=["is the smoke sensor detecting?",
                 "check if the smoke sensor is detecting",
                 "check whether the smoke sensor is detecting or not"]];

  query := @io.home-assistant.smoke.state()
  #_[utterances=["the state of the smoke sensor",
                 "if the smoke sensor is detecting or not detecting",
                 "whether the smoke sensor is detecting smoke or not detecting smoke",
                 "if the smoke sensor is detecting any smoke or not detecting smoke",
                 "whether the smoke sensor is detecting any smoke or not detecting smoke"]];

  stream := monitor @io.home-assistant.smoke.state()
  #_[utterances=["when the state of the smoke sensor changes"]];

  stream (p_state : Enum(detecting, not_detecting)) := edge( monitor @io.home-assistant.smoke.state()) on (state == p_state)
  #_[utterances=["when the smoke sensor becomes ${p_state}",
                "when the smoke sensor is ${p_state}",
                "when the smoke sensor turns ${p_state}",
                "when the smoke sensor changes to ${p_state}",
                "if the smoke sensor becomes ${p_state}",
                "if the smoke sensor is ${p_state}",
                "if the smoke sensor turns ${p_state}",
                "if the smoke sensor changes to ${p_state}"]];

  stream := edge( monitor @io.home-assistant.smoke.state()) on (state == enum(detecting))
  #_[utterances=["when the smoke sensor is detecting smoke",
                "if the smoke sensor is detecting smoke"]];

  stream := edge( monitor @io.home-assistant.smoke.state()) on (state == enum(not_detecting))
  #_[utterances=["when the smoke sensor is not detecting smoke",
                "if the smoke sensor is not detecting smoke"]];

  program (p_name : String) := now => @io.home-assistant.smoke(name=p_name).state() => notify
  #_[utterances=["is the ${p_name} smoke sensor detecting smoke?",
                 "check if the ${p_name} smoke sensor is detecting smoke",
                 "is the ${p_name} smoke sensor detecting any smoke?",
                 "check if the ${p_name} smoke sensor is detecting any smoke",
                 "is the ${p_name} smoke sensor not detecting smoke?",
                 "check if the ${p_name} smoke sensor is not detecting smoke",
                 "check if the ${p_name} smoke sensor is detecting smoke or not detecting smoke",
                 "check if the ${p_name} smoke sensor is detecting any smoke or not detecting smoke"]];

  query (p_name : String) := @io.home-assistant.smoke(name=p_name).state()
  #_[utterances=["the state of the ${p_name} smoke sensor",
                 "if the ${p_name} smoke sensor is detecting smoke or not detecting smoke",
                 "whether the ${p_name} smoke sensor is detecting smoke or not detecting smoke",
                 "if the ${p_name} smoke sensor is detecting any smoke or not detecting smoke",
                 "whether the ${p_name} smoke sensor is detecting any smoke or not detecting smoke"]];

  stream (p_name : String) := monitor @io.home-assistant.smoke(name=p_name).state()
  #_[utterances=["when the state of the ${p_name} smoke sensor changes"]];

  stream (p_name : String, p_state : Enum(detecting, not_detecting)) := edge( monitor @io.home-assistant.smoke(name=p_name).state()) on (state == p_state)
  #_[utterances=["when the ${p_name} smoke sensor becomes ${p_state}",
                "when the ${p_name} smoke sensor is ${p_state}",
                "when the ${p_name} smoke sensor turns ${p_state}",
                "when the ${p_name} smoke sensor changes to ${p_state}",
                "if the ${p_name} smoke sensor becomes ${p_state}",
                "if the ${p_name} smoke sensor is ${p_state}",
                "if the ${p_name} smoke sensor turns ${p_state}",
                "if the ${p_name} smoke sensor changes to ${p_state}"]];

  stream (p_name : String) := edge( monitor @io.home-assistant.smoke(name=p_name).state()) on (state == enum(detecting))
  #_[utterances=["when the ${p_name} smoke sensor is detecting smoke",
                "if the ${p_name} smoke sensor is detecting smoke"]];

  stream (p_name : String) := edge( monitor @io.home-assistant.smoke(name=p_name).state()) on (state == enum(not_detecting))
  #_[utterances=["when the ${p_name} smoke sensor is not detecting smoke",
                "if the ${p_name} smoke sensor is not detecting smoke"]];
}