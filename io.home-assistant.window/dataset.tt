dataset @io.home-assistant.window language "en" {
    program  := {
  now => @io.home-assistant.window.state() => notify;
}
    #_[utterances=["is my window open?",
                   "is my window closed?",
                   "check if my window is opened",
                   "did I close the window?",
                   "did anyone open the window?",
                   "did somebody shut the window?"]]
    #[id=54351695]
    #[name="StateThenNotify"];

    query  := @io.home-assistant.window.state()
    #_[utterances=["if my window is open or closed",
                   "whether my window is open or closed",
                   "if I opened the window",
                   "whether the window is shut",
                   "whether anyone closed the window"]]
    #[id=54351701]
    #[name="State"];

    stream  := monitor (@io.home-assistant.window.state())
    #_[utterances=["when the state of the window changes"]]
    #[id=54351706]
    #[name="MonitorState"];

    stream (p_state :Enum(open,closed))  := edge (monitor (@io.home-assistant.window.state())) on state == p_state
    #_[utterances=["when the window is ${p_state}",
                   "when my window gets ${p_state}"]]
    #[id=54351707]
    #[name="MonitorStateByState"];

    stream  := edge (monitor (@io.home-assistant.window.state())) on state == enum(open)
    #_[utterances=["when my window is open",
                   "when anyone opens the window",
                   "once somebody opens the window"]]
    #[id=54351709]
    #[name="MonitorStateByStateOpen"];

    stream  := edge (monitor (@io.home-assistant.window.state())) on state == enum(closed)
    #_[utterances=["when my window closes",
                   "when anyone shuts the window",
                   "once somebody closes the window",
                   "the moment the window gets shut"]]
    #[id=54351712]
    #[name="MonitorStateByStateClosed"];

    action (p_state :Enum(open,close))  := @io.home-assistant.window.set_openclose(state=p_state)
    #_[utterances=["${p_state} my window",
                   "${p_state} the window"]]
    #[id=54351716]
    #[name="SetOpencloseWithState"];

    action  := @io.home-assistant.window.set_openclose(state=enum(open))
    #_[utterances=["open my window for me",
                   "help me open the window"]]
    #[id=54351718]
    #[name="SetOpencloseWithStateOpen"];

    action  := @io.home-assistant.window.set_openclose(state=enum(close))
    #_[utterances=["close my window",
                   "shut the window"]]
    #[id=54351720]
    #[name="SetOpencloseWithStateClose"];

    program (p_name :String)  := {
  now => @io.home-assistant.window(name=p_name).state() => notify;
}
    #_[utterances=["is my ${p_name} window open?",
                   "is my ${p_name} window closed?",
                   "check if my ${p_name} window is opened",
                   "did I close the ${p_name} window?",
                   "did anyone open the ${p_name} window?",
                   "did somebody shut the ${p_name} window?"]]
    #[id=54351722]
    #[name="StateThenNotify1"];

    query (p_name :String)  := @io.home-assistant.window(name=p_name).state()
    #_[utterances=["if my ${p_name} window is open or closed",
                   "whether my ${p_name} window is open or closed",
                   "if I opened the ${p_name} window",
                   "whether the ${p_name} window is shut",
                   "whether anyone closed the ${p_name} window"]]
    #[id=54351728]
    #[name="State1"];

    stream (p_name :String)  := monitor (@io.home-assistant.window(name=p_name).state())
    #_[utterances=["when the ${p_name} window is opened or closed"]]
    #[id=54351733]
    #[name="MonitorState1"];

    stream (p_name :String, p_state :Enum(open,closed))  := edge (monitor (@io.home-assistant.window(name=p_name).state())) on state == p_state
    #_[utterances=["when the ${p_name} window is ${p_state}",
                   "when my ${p_name} window gets ${p_state}"]]
    #[id=54351734]
    #[name="MonitorStateByState1"];

    stream (p_name :String)  := edge (monitor (@io.home-assistant.window(name=p_name).state())) on state == enum(open)
    #_[utterances=["when my ${p_name} window is open",
                   "when anyone opens the ${p_name} window",
                   "once somebody opens the ${p_name} window"]]
    #[id=54351736]
    #[name="MonitorStateByStateOpen1"];

    stream (p_name :String)  := edge (monitor (@io.home-assistant.window(name=p_name).state())) on state == enum(closed)
    #_[utterances=["when my ${p_name} window closes",
                   "when anyone shuts the ${p_name} window",
                   "once somebody closes the ${p_name} window",
                   "the moment the ${p_name} window gets shut"]]
    #[id=54351739]
    #[name="MonitorStateByStateClosed1"];

    action (p_name :String, p_state :Enum(open,close))  := @io.home-assistant.window(name=p_name).set_openclose(state=p_state)
    #_[utterances=["${p_state} my ${p_name} window",
                   "${p_state} the ${p_name} window"]]
    #[id=54351743]
    #[name="SetOpencloseWithState1"];

    action (p_name :String)  := @io.home-assistant.window(name=p_name).set_openclose(state=enum(open))
    #_[utterances=["open my ${p_name} window for me",
                   "help me open the ${p_name} window"]]
    #[id=54351745]
    #[name="SetOpencloseWithStateOpen1"];

    action (p_name :String)  := @io.home-assistant.window(name=p_name).set_openclose(state=enum(close))
    #_[utterances=["close my ${p_name} window",
                   "shut the ${p_name} window"]]
    #[id=54351747]
    #[name="SetOpencloseWithStateClose1"];

}