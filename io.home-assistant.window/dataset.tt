dataset @io.home-assistant.window language "en" {

  program := now => @io.home-assistant.window.state() => notify
  #_[utterances=["is my window open?",
                 "is my window closed?",
                 "check if my window is opened",
                 "did I close the window?"]];

  query := @io.home-assistant.window.state()
  #_[utterances=["if my window is open or closed",
                 "whether my window is open or closed",
                 "if I opened the window"]];

  stream := monitor @io.home-assistant.window.state()
  #_[utterances=["when the state of the window changes"]];

  stream (p_state : Enum(open, closed)) := edge( @io.home-assistant.window.state()) on (state == p_state)
  #_[utterances=["when the window is ${p_state}",
                "if my window gets ${p_state}"]];

  stream := edge( @io.home-assistant.window.state()) on (state == enum(open))
  #_[utterances=["if my window is open"]];

  stream := edge( @io.home-assistant.window.state()) on (state == enum(closed))
  #_[utterances=["when my window closes"]];

  action (p_state :Enum(open,close)) := @io.home-assistant.window.set_openclose(state=p_state)
  #_[utterances=["${p_state} my window",
                 "${p_state} the window"]];

  action := @io.home-assistant.window.set_openclose(state=enum(open))
  #_[utterances=["open my window for me",
                "help me open the window"]];

  action := @io.home-assistant.window.set_openclose(state=enum(close))
  #_[utterances=["close my window",
                "bring in the window"]];

  program (p_name : String) := now => @io.home-assistant.window(name=p_name).state() => notify
  #_[utterances=["is my ${p_name} window open?",
                 "is my ${p_name} window closed?",
                 "check if my ${p_name} window is opened",
                 "did I close the ${p_name} window?"]];

  query (p_name : String) := @io.home-assistant.window(name=p_name).state()
  #_[utterances=["if my ${p_name} window is open or closed",
                 "whether my ${p_name} window is open or closed",
                 "if I opened the ${p_name} window"]];

  stream (p_name : String) := monitor @io.home-assistant.window(name=p_name).state()
  #_[utterances=["when the state of the ${p_name} window change"]];

  stream (p_name : String, p_state : Enum(open, closed)) := edge( @io.home-assistant.window(name=p_name).state()) on (state == p_state)
  #_[utterances=["when the ${p_name} window is ${p_state}",
                "if my ${p_name} window gets ${p_state}"]];

  stream (p_name : String) := edge( @io.home-assistant.window(name=p_name).state()) on (state == enum(open))
  #_[utterances=["if my ${p_name} window is open"]];

  stream (p_name : String) := edge( @io.home-assistant.window(name=p_name).state()) on (state == enum(closed))
  #_[utterances=["when my ${p_name} window closes"]];

  action (p_name : String, p_state :Enum(open,close)) := @io.home-assistant.window(name=p_name).set_openclose(state=p_state)
  #_[utterances=["${p_state} my ${p_name} window",
                 "${p_state} the ${p_name} window"]];

  action (p_name : String) := @io.home-assistant.window(name=p_name).set_openclose(state=enum(open))
  #_[utterances=["open my ${p_name} window for me",
                "help me open the ${p_name} window"]];

  action (p_name : String) := @io.home-assistant.window(name=p_name).set_openclose(state=enum(close))
  #_[utterances=["close my ${p_name} window",
                "bring in the ${p_name} window"]];
}