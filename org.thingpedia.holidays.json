{
    "module_type": "org.thingpedia.v1",
    "params": {},
    "category": "data",
    "subcategory": "service",
    "types": [],
    "child_types": [],
    "auth": {
        "type": "none"
    },
    "triggers": {},
    "actions": {},
    "queries": {
        "get_holidays": {
            "args": [
                {
                    "name": "country",
                    "type": "Entity(tt:country)",
                    "question": "",
                    "is_input": true,
                    "required": false
                },
                {
                    "name": "date",
                    "type": "Date",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "summary",
                    "type": "String",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "description",
                    "type": "String",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "Retrieve the Holidays.",
            "confirmation": "retrieve the holidays",
            "confirmation_remote": "",
            "canonical": "get holidays",
            "formatted": [
                {
                    "type": "text",
                    "text": "${summary} on ${date:date}"
                }
            ],
            "poll_interval": 86400000
        }
    },
    "examples": [
        {
            "utterance": "when it 's a holiday in $p_country",
            "program": "let stream x := \\(p_country :Entity(tt:country)) -> monitor ((@org.thingpedia.holidays.get_holidays(country=p_country)), (date >= start_of(day) && date <= end_of(day)));"
        },
        {
            "utterance": "the holidays in $p_country",
            "program": "let table x := \\(p_country :Entity(tt:country)) -> @org.thingpedia.holidays.get_holidays(country=p_country);"
        },
        {
            "utterance": "when it 's a holiday",
            "program": "let stream x := monitor ((@org.thingpedia.holidays.get_holidays()), (date >= start_of(day) && date <= end_of(day)));"
        },
        {
            "utterance": "the holidays",
            "program": "let table x := @org.thingpedia.holidays.get_holidays();"
        }
    ]
}
